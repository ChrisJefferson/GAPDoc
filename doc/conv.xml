<!-- $Id: conv.xml,v 1.18 2007-05-14 19:19:18 gap Exp $ -->

<Chapter Label="ch:conv">
<Heading>The Converters and an XML Parser</Heading>

The &GAPDoc; package contains a set of programs which allow us to  convert a
&GAPDoc; book  into several output  versions and  to make them  available to
&GAP;'s online help.<P/>

Currently  the following  output  formats are  provided:  text for  browsing
inside a  terminal running  &GAP;, &LaTeX; with  <C>hyperref</C>-package for
cross references via hyperlinks and HTML for reading with a Web-browser.<P/>



<Section Label="MakeDoc">
<Heading>Producing Documentation from Source Files</Heading>

Here   we    explain   how    to   use    the   functions    which   are
described  in  more   detail  in  the  following   sections.  We  assume
that   we   have   the   main   file   <F>MyBook.xml</F>   of   a   book
<C>"MyBook"</C>  in the  directory  <F>/my/book/path</F>. This  contains
<C>&tlt;&hash;Include    ...&tgt;</C>-statements    as   explained    in
Chapter&nbsp;<Ref Sect="Distributing"/>. These refer to some other files
as well as pieces of text which  are found in the comments of some &GAP;
source files <F>../lib/a.gd</F> and  <F>../lib/b.gi</F> (relative to the
path above). A &BibTeX; database  <F>MyBook.bib</F> for the citations is
also  in  the  directory  given  above. We  want  to  produce  a  text-,
<C>pdf-</C> and HTML-version of the  document. (A &LaTeX; version of the
manual  is produced,  so it  is also  easy to  compile <C>dvi</C>-,  and
postscript-versions.)<P/>

All the commands shown in this  Section are collected in the single function
<Ref Func="MakeGAPDocDoc"/>.<P/>

First   we  construct   the   complete  XML-document   as   a  string   with
<Ref   Func="ComposedDocument"/>.     This   interprets    recursively   the
<C>&tlt;&hash;Include ...&tgt;</C>-statements.

<Log>
gap> path := Directory("/my/book/path");;
gap> main := "MyBook.xml";;
gap> files := ["../lib/a.gd", "../lib/b.gi"];;
gap> bookname := "MyBook";;
gap> doc := ComposedDocument("GAPDoc", path, main, files, true);;
</Log>

Now  <C>doc</C> is  a  list with  two  entries, the  first  is a  string
containing  the XML-document,  the second  gives information  from which
files and  locations which part of  the document was collected.  This is
useful in the next step, if there are any errors in the document. <P/>

Next  we parse  the document  and store  its structure  in a  tree-like data
structure. The  commands for  this are <Ref  Func="ParseTreeXMLString"/> and
<Ref Func="CheckAndCleanGapDocTree"/>. 

<Log>
gap> r := ParseTreeXMLString(doc[1], doc[2]);;
gap> CheckAndCleanGapDocTree(r);
true
</Log>

We start  to produce  a text version  of the manual,  which can  be read
in  a  terminal  (window).  The command  is  <Ref  Func="GAPDoc2Text"/>.
This  produces  a  record  with  the actual  text  and  some  additional
information.  The text  can  be  written  chapter-wise  into files  with
<Ref Func="GAPDoc2TextPrintTextFiles"/>.  The names  of these  files are
<F>chap0.txt</F>,  <F>chap1.txt</F> and  so on.  The text  contains some
markup using  ANSI escape sequences.  This markup is substituted  by the
&GAP;  help system  (user configurable)  to  show the  text with  colors
and  other  attributes.  For  the  bibliography we  have  to  tell  <Ref
Func="GAPDoc2Text"/> the location of the &BibTeX; database by specifying
a <C>path</C> as second argument.

<Log>
gap> t := GAPDoc2Text(r, path);;
gap> GAPDoc2TextPrintTextFiles(t, path);
</Log>

This   command  constructs   all   parts  of   the  document   including
table  of   contents,  bibliography   and  index.  The   functions  <Ref
Func="FormatParagraph"/>  for   formatting  text  paragraphs   and  <Ref
Func="ParseBibFiles"/> for reading  &BibTeX; files with &GAP;  may be of
independent interest.<P/>

With the  text version we  have also  produced the information  which is
used for searching  with &GAP;'s online help. Also,  labels are produced
which can be  used by links in the HTML-  and <C>pdf</C>-versions of the
manual. <P/>

Next   we   produce   a   &LaTeX;  version   of   the   document.   <Ref
Func="GAPDoc2LaTeX"/> returns  a string  containing the  &LaTeX; source.
The utility  function <Ref Func="FileString"/>  writes the content  of a
string to a file, we choose <F>MyBook.tex</F>.

<Log>
gap> l := GAPDoc2LaTeX(r);;
gap> FileString(Filename(path, Concatenation(bookname, ".tex")), l);
</Log>

Assuming  that  you  have  a sufficiently  good  installation  of  &TeX;
available  (see  <Ref Func="GAPDoc2LaTeX"/>  for  details)  this can  be
processed with a series of commands like in the following example.

<Log>
cd /my/book/path
pdflatex MyBook
bibtex MyBook
pdflatex MyBook
makeindex MyBook
pdflatex MyBook
mv MyBook.pdf manual.pdf
</Log>

After this  we have  a <C>pdf</C>-version  of the  document in  the file
<F>manual.pdf</F>. It  contains hyperlink information which  can be used
with  appropriate browsers  for convenient  reading of  the document  on
screen  (e.g., <C>xpdf</C>  is nice  because it  allows remote  calls to
display named locations  of the document). Of course, we  could also use
other commands like <C>latex</C> or  <C>dvips</C> to process the &LaTeX;
source file.

Furthermore  we   have  produced  a  file   <F>MyBook.pnr</F>  which  is
&GAP;-readable  and  contains  the  page  number  information  for  each
(sub-)section of the document. <P/>

We  can add  this page  number information  to the  indexing information
collected by the text converter  and then print a <F>manual.six</F> file
which is read by &GAP; when the manual is loaded. This is done with <Ref
Func="AddPageNumbersToSix"/> and <Ref Func="PrintSixFile"/>.

<Log>
gap> AddPageNumbersToSix(r, Filename(path, "MyBook.pnr"));
gap> PrintSixFile(Filename(path, "manual.six"), r, bookname);
</Log>

Finally  we  produce  an  HTML-version  of the  document  and  write  it
(chapter-wise)  into  files   <F>chap0.html</F>,  <F>chap1.html</F>  and
so  on.  They  can  be  read with  any  Web-browser.  The  commands  are
<Ref  Func="GAPDoc2HTML"/> and  <Ref Func="GAPDoc2HTMLPrintHTMLFiles"/>.
We  also  add  a  link  from  <F>manual.html</F>  to  <F>chap0.html</F>.
You  probably   want  to   add  a   file  <F>manual.css</F>,   see  <Ref
Func="GAPDoc2HTMLPrintHTMLFiles"/>  for   more  details.   The  argument
<C>path</C>  of   <Ref  Func="GAPDoc2HTML"/>  specifies   the  directory
containing the &BibTeX; database files.

<Log>
gap> h := GAPDoc2HTML(r, path);;
gap> GAPDoc2HTMLPrintHTMLFiles(h, path);
</Log>

<ManSection >
<Func Arg="path, main, files, bookname[, gaproot]" Name="MakeGAPDocDoc" />

<Description>
This  function  collects  all  the   commands  for  producing  a  text-,
<C>pdf</C>-  and HTML-version  of a  &GAPDoc; document  as described  in
Section&nbsp;<Ref Sect="MakeDoc"/>. It checks the <C>.log</C> file from
the call of <C>pdflatex</C> and reports if there are errors, warnings or
overfull boxes.<P/>

<Emph>Note:</Emph> If this function works for you depends on your
operating system and installed software. It will probably work on most
<C>UNIX</C> systems with a standard &LaTeX; installation. If the
function doesn't work for you look at the source code and adjust it to
your system. <P/>

Here  <A>path</A> must  be the  directory  (as string  or directory  object)
containing  the  main  file  <A>main</A>  of the  document  (given  with  or
without the  <C>.xml</C> extension. The  argument <A>files</A> is a  list of
(probably source code) files relative to <A>path</A> which contain pieces of
documentation which must be included  in the document, see Chapter&nbsp;<Ref
Chap="Distributing"/>. And <A>bookname</A>  is the name of the  book used by
&GAP;'s online help.  The optional argument <A>gaproot</A> must  be a string
which gives the relative path from  <A>path</A> to the &GAP; root directory.
If  this is  given,  the HTML  files  are produced  with  relative paths  to
external books.<P/>

Experimental:  <Ref Func="MakeGAPDocDoc"/>  can  be  called with  additional
arguments   <C>"Tth"</C>  and/or   <C>"MathML"</C>.  If   these  are   given
additional  variants   of  the   HTML  conversion   are  called,   see  <Ref
Func="GAPDoc2HTML"/> for details.

</Description>
</ManSection>
</Section>

<Section Label="ParseXML">
<Heading>Parsing XML Documents</Heading>
Arbitrary well-formed XML documents can be parsed and browsed by the
following functions.

<#Include Label="ParseTreeXMLString">

<#Include Label="StringXMLElement">

<#Include Label="EntitySubstitution">

<#Include Label="DisplayXMLStructure">

<#Include Label="ApplyToNodesParseTree">

And here are  utilities for processing &GAPDoc; XML documents.

<#Include Label="CheckAndCleanGapDocTree">

<#Include Label="AddParagraphNumbersGapDocTree">

<#Include Label="InfoXMLParser">

</Section>

<Section Label="Converters">
<Heading>The Converters</Heading>
Here  are  more details  about  the  conversion  programs for  &GAPDoc;  XML
documents.

<#Include Label="GAPDoc2LaTeX">

<#Include Label="GAPDoc2Text">

<#Include Label="GAPDoc2TextPrintTextFiles">

<#Include Label="AddPageNumbersToSix">

<#Include Label="PrintSixFile">

<#Include Label="SetGAPDocTextTheme">

<#Include Label="GAPDoc2HTML">

<#Include Label="GAPDoc2HTMLPrintHTMLFiles">

<#Include Label="InfoGAPDoc">

</Section>

</Chapter>

<Chapter Label="ch:util">
<Heading>String and Text Utilities</Heading>


<Section Label="TextUtil">
<Heading>Text Utilities</Heading>

This  section describes  some utility  functions for  handling texts  within
&GAP;. They are used  by  the  functions in the &GAPDoc;  package but may be
useful for other  purposes as well. We start with  some variables containing
useful strings and  go on with functions for parsing  and reformatting text.
<P/>

<#Include Label="CharsColls">

<#Include Label="TextAttr">

<#Include Label="FormatParagraph">

<#Include Label="SubstitutionSublist">

<!-- moved into GAP library
<#Include Label="NormalizedWhitespace">
-->
<#Include Label="StripBeginEnd">

<#Include Label="StripEscapeSequences">

<#Include Label="RepeatedString">

<#Include Label="NumberDigits">

<#Include Label="PositionMatchingDelimiter">

<#Include Label="WordsString">

<#Include Label="Base64String">

</Section>

<Section Label="sec:Unicode">
<Heading>Unicode Strings</Heading>
The &GAPDoc; package provides some tools to deal with unicode characters
and strings. These can be used for recoding text strings between various
encodings.

<#Include Label="Unicode">

</Section>

<Section Label="PrintUtil">
<Heading>Print Utilities</Heading>

The following  printing utilities  turned out to  be useful  for interactive
work with texts in &GAP;. But they  are more general and so we document them
here.

<#Include Label="PrintTo1">

<#Include Label="StringPrint">

<#Include Label="PrintFormattedString">

<#Include Label="Page">

<#Include Label="StringFile">

</Section>
</Chapter>

<Chapter Label="ch:bibutil">
<Heading>Utilities for Bibliographies</Heading>

A  standard for  collecting  references (in  particular to  mathematical
texts) is &BibTeX; 
(<URL>http://www.ctan.org/tex-archive/biblio/bibtex/distribs/doc/</URL>). 
A disadvantage of &BibTeX; is that the format of the
data is specified  with the use by  &LaTeX; in mind. The  data format is
less suited  for conversion to other  document types like plain  text or
HTML.<P/>

In the first section we describe  utilities for using data from &BibTeX;
files in &GAP;. <P/>

In  the  second  section  we  introduce a  new  XML  based  data  format
BibXMLext for bibliographies which  seems better suited for other
tasks than using it with &LaTeX;. <P/>

Another section  will describe  utilities to deal  with BibXMLext
data in &GAP;.


<Section Label="ParseBib">
<Heading>Parsing &BibTeX; Files</Heading>

Here are  functions for  parsing, normalizing  and printing  reference lists
in  &BibTeX;  format. The  reference  describing  this format  is&nbsp;<Cite
Key="La85" Where="Appendix B"/>.

<#Include Label="ParseBibFiles">

<#Include Label="NormalizeNameAndKey">

<#Include Label="WriteBibFile">

<#Include Label="InfoBibTools">

</Section>

<Section Label="BibXMLformat">
<Heading>The BibXMLext Format</Heading>

Bibliographical data in &BibTeX; files have the disadvantage that the
actual data are given in &LaTeX; syntax. This makes it difficult to use
the data for anything but for &LaTeX;, say for representations of the
data as plain text or HTML. For example: mathematical formulae are in
&LaTeX; <C>&dollar;</C> environments,  non-ASCII characters can be
specified in many strange ways, and how to specify URLs for links if the
output format allows them?<P/>

Here we propose an XML data format for bibliographical data which
addresses these problems, it is called BibXMLext. In the next 
section we describe some tools for
generating (an approximation to) this data format from &BibTeX; data,
and for using data given in BibXMLext format for various
purposes. <P/>

The first motivation for this development was the handling of
bibliographical data in &GAPDoc;, but the format and the tools are certainly 
useful for other purposes as well.<P/>

We start from a DTD <F>bibxml.dtd</F> which is publicly available, say
from <URL>http://bibtexml.sf.net/</URL>. This is essentially a
reformulation of the definition of the &BibTeX; format, including
several of some widely used further fields. This has already the
advantage that a generic XML parser can check  the validity of the
data entries, for example for missing compulsary fields in entries.
We applied the following changes and extensions to define the
DTD for BibXMLext, stored in <F>bibxmlext.dtd</F>:

<List >
<Mark>names</Mark>
<Item>Lists of names in the <C>author</C> and <C>editor</C> fields in
&BibTeX; are difficult to parse. Here they must be given by a sequence
of <C>&lt;name></C>-elements which each contain an optional <C>&lt;first></C>-
and a <C>&lt;last></C>-element for the first and last names,
respectively.</Item>
<Mark><C>&lt;M></C> and <C>&lt;Math></C></Mark>
<Item>These elements enclose mathematical formulae, the content is
&LaTeX; code (without the <C>&dollar;</C>). These should be handled in
the same way as the elements with the same names in &GAPDoc;, see
<Ref Subsect="M"/> and <Ref Subsect="Math"/>. In particular, simple
formulae which have a well defined plain text representation can be
given in <C>&lt;M></C>-elements.</Item>
<Mark>Encoding</Mark>
<Item>Note that in XML files we can use the full range of unicode
characters, see <URL>http://www.unicode.org/</URL>. All non-ASCII
characters should be specified as unicode characters. This makes dealing
with special characters easy for plain text or HTML, but for use with 
&LaTeX; some sort of translation is necessary.</Item>
<Mark><C>&lt;URL></C></Mark>
<Item>These elements are allowed everywhere in the text and should be
represented by links in converted formats which allow this. It is used
in the same way as the element with the same name in &GAPDoc;, see
<Ref Subsect="URL"/>.</Item>
<Mark><C>&lt;Alt Only="..."></C> and <C>&lt;Alt Not="..."></C></Mark>
<Item>Sometimes information should be given in different ways, depending
on the output format of the data. This is possible with the 
<C>&lt;Alt></C>-elements with the same definition as in &GAPDoc;, see
<Ref Subsect="Alt"/>.
</Item>
<Mark><C>&lt;C></C></Mark>
<Item>This element should be used to protect text from case changes by
converters (the extra <C>&obrace;&cbrace;</C> characters in &BibTeX;
title fields).</Item>
<Mark><C>&lt;string key="..." value="..."/></C> and 
<C>&lt;value key="..."/></C></Mark>
<Item>The <C>&lt;string></C>-element defines key-value pairs which can
be use in any field via the <C>&lt;value></C>-element (not only for
whole fields but also parts of the text).</Item>
<Mark><C>&lt;other type="..."></C></Mark>
<Item>This is a generic element for fields which are otherwise not
supported. An arbitrary number of them is allowed for each entry, so any
kind of additional data can be added to entries.</Item>
<Mark><C>&lt;Wrap Name="..."></C></Mark>
<Item>This generic element is allowed inside all fields. This markup will be 
just ignored (but not the element content) by our standard tools. But
it can be a useful hook for introducing arbitrary further markup 
(and our tools can easily be extended to handle it).</Item>
<Mark>Extra entities</Mark>
<Item>The DTD defines the standard XML entities (<Ref
Subsect="XMLspchar"/> and the entities for special characters in &LaTeX;
as also defined in &GAPDoc; (<Ref Subsect="GDspchar"/>). In particular,
use <C>&tamp;ndash;</C> in page ranges. We also define <C>&tamp;copyright;</C>.
</Item>
</List>

For further details of the DTD we refer to the file <F>bibxmlext.dtd</F>
itself which is shown in appendix <Ref Appendix="bibxmlextdtd"/>. That
file also recalls some information from the &BibTeX; documentation on how
the standard fields of entries should be used. Which entry types and
which fields are supported (and the ordering of the fields which is
fixed by a DTD) can be either read off the DTD, or within &GAP; one can use 
the function <Ref Func="TemplateBibXML"/> to get templates for the
various entry types.
<P/>

Here is an example of a BibXMLext document:
<Listing Type="mybib.xml"><![CDATA[
<#Include SYSTEM "mybib.xml">
]]></Listing>

There is a standard XML header and a <C>DOCTYPE</C> declaration
refering to the <F>bibxmlext.dtd</F> DTD mentioned above. Local
entities could be defined in the <C>DOCTYPE</C> tag as shown in the
example in <Ref Subsect="GDent"/>. The actual content of the document is
inside a <C>&lt;file></C>-element, it consists of <C>&lt;string></C>- and
<C>&lt;entry></C>-elements. Several of the BibXMLext markup features are
shown. We will use this input document for some examples below.
</Section>

<Section Label="BibXMLtools">
<Heading>Utilities for BibXMLext data</Heading>

<Subsection Label="Subsect:IntroXMLBib">
<Heading>Translating &BibTeX; to BibXMLext</Heading>
First we describe a tool which can  translate bibliography entries from
&BibTeX; data to BibXMLext <C>&lt;entry></C>-elements. It also does some
validation of the data. In some
cases it is desirable to improve the result by hand afterwards 
(editing formulae, adding <C>&lt;URL></C>-elements, translating
non-ASCII characters to unicode, ...).<P/>
See <Ref Func="WriteBibXMLextFile"/> below for how to write the results 
to a BibXMLext file.
</Subsection>

<#Include Label="StringBibAsXMLext">

The following functions allow parsing of data which are already in
BibXMLext format.

<#Include Label="ParseBibXMLextString">

<#Include Label="WriteBibXMLextFile">

<Subsection Label="Subsect:RecBib">
<Heading>Bibliography Entries as Records</Heading>
For working with BibXMLext entries we find it convenient to first
translate the parse tree of an entry, as returned by <Ref
Func="ParseBibXMLextFiles"/>, to a record with the field names of the
entry as components whose value is the content of the field as string.
These strings are generated with respect to a result type. The records are
generated by the following function which can be customized by the user.
</Subsection>

<#Include Label="RecBibXMLEntry">

<#Include Label="AddHandlerBuildRecBibXMLEntry">

The following command may be useful to generate completly new
bibliography entries in BibXMLext format. It also informs about the
supported entry types and field names.

<#Include Label="TemplateBibXML">

</Section>

</Chapter>

