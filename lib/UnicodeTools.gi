#############################################################################
##
#W  UnicodeTools.gi                GAPDoc                     Frank Lübeck
##
#H  @(#)$Id: UnicodeTools.gi,v 1.7 2007-05-13 16:18:50 gap Exp $
##
#Y  Copyright (C)  2007,  Frank Lübeck,  Lehrstuhl D für Mathematik,  
#Y  RWTH Aachen
##  
##  The files UnicodeTools.g{d,i} contain utilities for converting text
##  between different encodings. They introduce unicode strings and
##  characters as GAP objects.
##  


# UNICODE_RECODE is a is a record. For some string enc, describing a
# character encoding, UNICODE_RECODE.(enc) is a function which translates
# a GAP string in encoding enc to a list of integers describing the unicode
# codepoints of the characters in the string.
#
# UNICODE_RECODE.TABLES contains some embeddings of 8 bit code pages into 
# unicode as lists of length 256, codepoint of character i in [0..255] in 
# position i+1.

# normalize encoding names
UNICODE_RECODE.NormalizedEncodings := rec(
  latin1 := "ISO-8859-1",
  latin2 := "ISO-8859-2",
  latin3 := "ISO-8859-3",
  latin4 := "ISO-8859-4",
  latin5 := "ISO-8859-9",
  latin6 := "ISO-8859-10",
  latin7 := "ISO-8859-13",
  latin8 := "ISO-8859-14",
  latin9 := "ISO-8859-15",
  latin0 := "ISO-8859-15",
  utf8 := "UTF-8",
  UTF8 := "UTF-8",
  ASCII := "ANSI_X3.4-1968",
  US\-ASCII := "ANSI_X3.4-1968",
  xml := "XML",
);
UNICODE_RECODE.f := function()
  local nam, i;
  for i in Concatenation([1..11],[13..15]) do
    nam := Concatenation("ISO-8859-",String(i));
    UNICODE_RECODE.NormalizedEncodings.(nam) := nam;
    UNICODE_RECODE.Decoder.(nam) := function(str)
      return UNICODE_RECODE.TABLES.(nam){List(str, INT_CHAR)+1};
    end;
  od;
  nam := "ANSI_X3.4-1968";
  UNICODE_RECODE.NormalizedEncodings.(nam) := nam;
  UNICODE_RECODE.Decoder.(nam) := function(str)
    return UNICODE_RECODE.TABLES.(nam){List(str, INT_CHAR)+1};
  end;

  UNICODE_RECODE.NormalizedEncodings.("UTF-8") := "UTF-8";
  UNICODE_RECODE.NormalizedEncodings.("XML") := "XML";
end;
UNICODE_RECODE.f();
Unbind(UNICODE_RECODE.f);
# slightly more efficient for latin1:
UNICODE_RECODE.Decoder.("ISO-8859-1") := function(str)
  return List(str, INT_CHAR);
end;
# helper function;  arg:  str[, start], translate single UTF-8 character
# to its unicode number
UNICODE_RECODE.UnicodeUTF8Char := function(arg)
  local str, i, a, i1, i2, i3;
  str := arg[1];
  if Length(arg)>1 then
    i := arg[2];
  else
    i := 1;
  fi;
  a := INT_CHAR(str[i]);
  if a < 128 then
    return a;
  elif a < 224 then
    if i = Length(str) then return fail; fi;
    i1 := INT_CHAR(str[i+1]);
    if i1 < 128 or i1 > 191 then
      return fail;
    fi;
    return (a mod 192)*64 + (i1 mod 64);
  elif a < 240 then
    if Length(str) < i+2 then return fail; fi;
    i1 := INT_CHAR(str[i+1]);
    i2 := INT_CHAR(str[i+2]);
    if i1 < 128 or i2 < 128 or i1 > 191 or i2 > 191 then
      return fail;
    fi;
    return (a mod 224)*4096 + (i1 mod 64)*64
                            + (i2 mod 64);
  else
    if Length(str) < i+3 then return fail; fi;
    i1 := INT_CHAR(str[i+1]);
    i2 := INT_CHAR(str[i+2]);
    i3 := INT_CHAR(str[i+3]);
    if i1<128 or i2<128 or i3<128 or i1>191 or i2>191 or i3>191 then
      return fail;
    fi;
    return (a mod 240)*262144 + (i1 mod 64)*4096
                              + (i2 mod 64)*64
                              + (i3 mod 64);
  fi;
end;
UNICODE_RECODE.Decoder.("UTF-8") := function(str)
  local res, c, i;
  res := [];
  for i in [1..Length(str)] do
    c := INT_CHAR(str[i]);
    if c < 128 or c > 191 then
      Add(res, UNICODE_RECODE.UnicodeUTF8Char(str, i));
    fi;
  od;
  if fail in res then return fail; fi;
  return res;
end;

UNICODE_RECODE.Decoder.("XML") := function(str)
  local res, i, j, n;
  res := [];
  i := 1;
  while i <= Length(str) do
    if str[i] = '&' and i < Length(str) and str[i+1] = '#' then
      j := Position(str, ';', i);
      n := str{[i+2..j-1]};
      if n[1] = 'x' then
        n := IntHexString(n{[2..Length(n)]});
      else
        n := Int(n);
      fi;
      Add(res, n);
      i := j+1;
    else
      Add(res, INT_CHAR(str[i]));
      i := i+1;
    fi;
  od;
  return res;
end;


################################################
UNICODE_RECODE.TABLES := 
rec(
  ANSI_X3\.4\-1968 := [0..127],
  ISO\-8859\-1 := [ 0 .. 255 ],
  ISO\-8859\-2 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
      17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
      35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 
      53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
      71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 
      89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 
      105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 
      119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 
      133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 
      147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 260, 
      728, 321, 163, 317, 346, 166, 167, 352, 350, 356, 377, 172, 381, 379, 
      175, 261, 731, 322, 179, 318, 347, 711, 183, 353, 351, 357, 378, 733, 
      382, 380, 340, 192, 193, 258, 195, 313, 262, 198, 268, 200, 280, 202, 
      282, 204, 205, 270, 272, 323, 327, 210, 211, 336, 213, 214, 344, 366, 
      217, 368, 219, 220, 354, 222, 341, 224, 225, 259, 227, 314, 263, 230, 
      269, 232, 281, 234, 283, 236, 237, 271, 273, 324, 328, 242, 243, 337, 
      245, 246, 345, 367, 249, 369, 251, 252, 355, 729, 255 ],
  ISO\-8859\-3 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
      17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
      35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 
      53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
      71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 
      89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 
      105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 
      119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 
      133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 
      147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 294, 
      728, 162, 163, 164, 292, 166, 167, 304, 350, 286, 308, 172, 173, 379, 
      175, 295, 177, 178, 179, 180, 293, 182, 183, 305, 351, 287, 309, 188, 
      189, 380, 191, 192, 193, 194, 195, 266, 264, 198, 199, 200, 201, 202, 
      203, 204, 205, 206, 207, 208, 209, 210, 211, 288, 213, 214, 284, 216, 
      217, 218, 219, 364, 348, 222, 223, 224, 225, 226, 227, 267, 265, 230, 
      231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 289, 
      245, 246, 285, 248, 249, 250, 251, 365, 349, 729, 255 ],
  ISO\-8859\-4 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
      17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
      35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 
      53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
      71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 
      89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 
      105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 
      119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 
      133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 
      147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 260, 
      312, 342, 163, 296, 315, 166, 167, 352, 274, 290, 358, 172, 381, 174, 
      175, 261, 731, 343, 179, 297, 316, 711, 183, 353, 275, 291, 359, 330, 
      382, 331, 256, 192, 193, 194, 195, 196, 197, 302, 268, 200, 280, 202, 
      278, 204, 205, 298, 272, 325, 332, 310, 211, 212, 213, 214, 215, 370, 
      217, 218, 219, 360, 362, 222, 257, 224, 225, 226, 227, 228, 229, 303, 
      269, 232, 281, 234, 279, 236, 237, 299, 273, 326, 333, 311, 243, 244, 
      245, 246, 247, 371, 249, 250, 251, 361, 363, 729, 255 ],
  ISO\-8859\-5 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
      17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
      35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 
      53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
      71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 
      89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 
      105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 
      119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 
      133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 
      147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 1025, 
      1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 172, 
      1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 
      1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 
      1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 
      1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 
      1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 
      1098, 1099, 1100, 1101, 1102, 1103, 8470, 1105, 1106, 1107, 1108, 1109, 
      1110, 1111, 1112, 1113, 1114, 1115, 1116, 167, 1118, 1119, 255 ],
  ISO\-8859\-6 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
      17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
      35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 
      53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
      71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 
      89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 
      105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 
      119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 
      133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 
      147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 
      161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 1548, 172, 173, 174, 
      175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 1563, 187, 188, 
      189, 1567, 191, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 
      1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 
      1590, 1591, 1592, 1593, 1594, 218, 219, 220, 221, 222, 1600, 1601, 
      1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 
      1614, 1615, 1616, 1617, 1618, 242, 243, 244, 245, 246, 247, 248, 249, 
      250, 251, 252, 253, 254, 255 ],
  ISO\-8859\-7 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
      17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
      35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 
      53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
      71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 
      89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 
      105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 
      119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 
      133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 
      147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 701, 
      700, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 8213, 
      175, 176, 177, 178, 900, 901, 902, 182, 904, 905, 906, 186, 908, 188, 
      910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 
      924, 925, 926, 927, 928, 929, 209, 931, 932, 933, 934, 935, 936, 937, 
      938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 
      952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 
      966, 967, 968, 969, 970, 971, 972, 973, 974, 254, 255 ],
  ISO\-8859\-8 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
      17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
      35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 
      53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
      71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 
      89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 
      105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 
      119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 
      133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 
      147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 
      161, 162, 163, 164, 165, 166, 167, 168, 215, 170, 171, 172, 173, 8254, 
      175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 247, 186, 187, 188, 
      189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 
      203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 
      217, 218, 219, 220, 221, 8215, 1488, 1489, 1490, 1491, 1492, 1493, 
      1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 
      1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 250, 251, 252, 
      253, 254, 255 ],
  ISO\-8859\-9 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
      17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
      35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 
      53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
      71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 
      89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 
      105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 
      119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 
      133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 
      147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 
      161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 
      175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 
      189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 
      203, 204, 205, 206, 286, 208, 209, 210, 211, 212, 213, 214, 215, 216, 
      217, 218, 219, 304, 350, 222, 223, 224, 225, 226, 227, 228, 229, 230, 
      231, 232, 233, 234, 235, 236, 237, 238, 287, 240, 241, 242, 243, 244, 
      245, 246, 247, 248, 249, 250, 251, 305, 351, 254, 255 ],
  ISO\-8859\-10 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
      34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
      52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
      70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 
      88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 
      104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 
      118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 
      132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 
      146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
      260, 274, 290, 298, 296, 310, 166, 315, 272, 352, 358, 381, 172, 362, 
      330, 175, 261, 275, 291, 299, 297, 311, 182, 316, 273, 353, 359, 382, 
      8213, 363, 331, 256, 192, 193, 194, 195, 196, 197, 302, 268, 200, 280, 
      202, 278, 204, 205, 206, 207, 325, 332, 210, 211, 212, 213, 360, 215, 
      370, 217, 218, 219, 220, 221, 222, 257, 224, 225, 226, 227, 228, 229, 
      303, 269, 232, 281, 234, 279, 236, 237, 238, 239, 326, 333, 242, 243, 
      244, 245, 361, 247, 371, 249, 250, 251, 252, 253, 312, 255 ],
  ISO\-8859\-11 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
      34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
      52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
      70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 
      88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 
      104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 
      118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 
      132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 
      146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
      3585, 3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 
      3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 
      3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619, 3620, 
      3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3630, 3631, 3632, 
      3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 218, 219, 
      220, 221, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 
      3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 
      3669, 3670, 3671, 3672, 3673, 3674, 3675, 251, 252, 253, 254, 255 ],
  ISO\-8859\-13 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
      34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
      52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
      70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 
      88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 
      104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 
      118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 
      132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 
      146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
      8221, 161, 162, 163, 8222, 165, 166, 216, 168, 342, 170, 171, 172, 173, 
      198, 175, 176, 177, 178, 8220, 180, 181, 182, 248, 184, 343, 186, 187, 
      188, 189, 230, 260, 302, 256, 262, 195, 196, 280, 274, 268, 200, 377, 
      278, 290, 310, 298, 315, 352, 323, 325, 210, 332, 212, 213, 214, 370, 
      321, 346, 362, 219, 379, 381, 222, 261, 303, 257, 263, 227, 228, 281, 
      275, 269, 232, 378, 279, 291, 311, 299, 316, 353, 324, 326, 242, 333, 
      244, 245, 246, 371, 322, 347, 363, 251, 380, 382, 8217, 255 ],
  ISO\-8859\-14 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
      34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
      52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
      70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 
      88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 
      104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 
      118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 
      132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 
      146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
      7682, 7683, 162, 266, 267, 7690, 166, 7808, 168, 7810, 7691, 7922, 172, 
      173, 376, 7710, 7711, 288, 289, 7744, 7745, 181, 7766, 7809, 7767, 
      7811, 7776, 7923, 7812, 7813, 7777, 191, 192, 193, 194, 195, 196, 197, 
      198, 199, 200, 201, 202, 203, 204, 205, 206, 372, 208, 209, 210, 211, 
      212, 213, 7786, 215, 216, 217, 218, 219, 220, 374, 222, 223, 224, 225, 
      226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 373, 
      240, 241, 242, 243, 244, 245, 7787, 247, 248, 249, 250, 251, 252, 375, 
      254, 255 ],
  ISO\-8859\-15 := [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
      34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
      52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
      70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 
      88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 
      104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 
      118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 
      132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 
      146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
      160, 161, 162, 8364, 164, 352, 166, 353, 168, 169, 170, 171, 172, 173, 
      174, 175, 176, 177, 178, 381, 180, 181, 182, 382, 184, 185, 186, 338, 
      339, 376, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 
      202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 
      216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 
      230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 
      244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 ] );
# reverse tables are only generated when needed
UNICODE_RECODE.TABLES.reverse := rec();
##  # this created the code tables for ISO-8859:
##  for i in Concatenation([1..11],[13..15]) do
##    fn := Concatenation("iso8859-",String(i),".txt");
##    str := StringFile(fn);
##    str := SplitString(str,"","\n");
##    str := List(str, a-> SplitString(a,""," \t"));
##    str := List(str, a-> List([1,2], k-> IntHexString(
##                Filtered(a[k], x-> not x in "=+U"))));
##    str := Filtered(str, a-> a[1]<>a[2]);
##    fn := Concatenation("ISO-8859-",String(i));
##    res := [0..255];
##    for a in str do 
##      res[a[1]] := a[2];
##    od;
##    UNICODE_RECODE.TABLES.(fn) := res;
##  od;
################################################

InstallValue(LaTeXUnicodeTable,
 [
 [160,"{\\nobreakspace}"],
 [161,"{\\textexclamdown}"],
 [162,"{\\textcent}"],
 [163,"{\\pounds}"],
 [164,"{\\textcurrency}"],
 [165,"{\\textyen}"],
 [166,"{\\textbrokenbar}"],
 [167,"{\\S}"],
 [168,"{\\\"{\\empty}"],
 [169,"{\\copyright}"],
 [170,"{\\textordfeminine}"],
 [171,"{\\guillemotleft}"],
 [172,"{\\ensuremath{\\lnot}}"],
 [173,"{\\-}"],
 [174,"{\\textregistered}"],
 [175,"{\\a={\\empty}"],
 [176,"{\\textdegree}"],
 [177,"{\\ensuremath{\\pm}}"],
 [178,"{\\textsuperscript2}"],
 [179,"{\\textsuperscript3}"],
 [180,"{\\a'{\\empty}"],
 [181,"{\\ensuremath{\\mu}}"],
 [182,"{\\P}"],
 [183,"{\\textperiodcentered}"],
 [184,"{\\c\\space}"],
 [185,"{\\textsuperscript1}"],
 [186,"{\\textordmasculine}"],
 [187,"{\\guillemotright}"],
 [188,"{\\textonequarter}"],
 [189,"{\\textonehalf}"],
 [190,"{\\textthreequarters}"],
 [191,"{\\textquestiondown}"],
 [192,"{\\a`A}"],
 [193,"{\\a'A}"],
 [194,"{\\^A}"],
 [195,"{\\~A}"],
 [196,"{\\\"A}"],
 [197,"{\\r A}"],
 [198,"{\\AE}"],
 [199,"{\\c C}"],
 [200,"{\\a`E}"],
 [201,"{\\a'E}"],
 [202,"{\\^E}"],
 [203,"{\\\"E}"],
 [204,"{\\a`I}"],
 [205,"{\\a'I}"],
 [206,"{\\^I}"],
 [207,"{\\\"I}"],
 [208,"{\\DH}"],
 [209,"{\\~N}"],
 [210,"{\\a`O}"],
 [211,"{\\a'O}"],
 [212,"{\\^O}"],
 [213,"{\\~O}"],
 [214,"{\\\"O}"],
 [215,"{\\ensuremath{\\times}}"],
 [216,"{\\O}"],
 [217,"{\\a`U}"],
 [218,"{\\a'U}"],
 [219,"{\\^U}"],
 [220,"{\\\"U}"],
 [221,"{\\a'Y}"],
 [222,"{\\TH}"],
 [223,"{\\ss}"],
 [224,"{\\a`a}"],
 [225,"{\\a'a}"],
 [226,"{\\^a}"],
 [227,"{\\~a}"],
 [228,"{\\\"a}"],
 [229,"{\\r a}"],
 [230,"{\\ae}"],
 [231,"{\\c c}"],
 [232,"{\\a`e}"],
 [233,"{\\a'e}"],
 [234,"{\\^e}"],
 [235,"{\\\"e}"],
 [236,"{\\a`\\i}"],
 [237,"{\\a'\\i}"],
 [238,"{\\^\\i}"],
 [239,"{\\\"\\i}"],
 [240,"{\\dh}"],
 [241,"{\\~n}"],
 [242,"{\\a`o}"],
 [243,"{\\a'o}"],
 [244,"{\\^o}"],
 [245,"{\\~o}"],
 [246,"{\\\"o}"],
 [247,"{\\ensuremath{\\div}}"],
 [248,"{\\o}"],
 [249,"{\\a`u}"],
 [250,"{\\a'u}"],
 [251,"{\\^u}"],
 [252,"{\\\"u}"],
 [253,"{\\a'y}"],
 [254,"{\\th}"],
 [255,"{\\\"y}"],
 [256,"{\\a=A}"],
 [257,"{\\a=a}"],
 [258,"{\\u A}"],
 [259,"{\\u a}"],
 [260,"{\\k A}"],
 [261,"{\\k a}"],
 [262,"{\\a'C}"],
 [263,"{\\a'c}"],
 [264,"{\\^C}"],
 [265,"{\\^c}"],
 [266,"{\\.C}"],
 [267,"{\\.c}"],
 [268,"{\\v C}"],
 [269,"{\\v c}"],
 [270,"{\\v D}"],
 [271,"{\\v d}"],
 [272,"{\\DJ}"],
 [273,"{\\dj}"],
 [274,"{\\a=E}"],
 [275,"{\\a=e}"],
 [276,"{\\u E}"],
 [277,"{\\u e}"],
 [278,"{\\.E}"],
 [279,"{\\.e}"],
 [280,"{\\k E}"],
 [281,"{\\k e}"],
 [282,"{\\v E}"],
 [283,"{\\v e}"],
 [284,"{\\^G}"],
 [285,"{\\^g}"],
 [286,"{\\u G}"],
 [287,"{\\u g}"],
 [288,"{\\.G}"],
 [289,"{\\.g}"],
 [290,"{\\c G}"],
 [292,"{\\^H}"],
 [293,"{\\^h}"],
 [295,"{\\ensuremath{\\hbar}}"],
 [296,"{\\~I}"],
 [297,"{\\~\\i}"],
 [298,"{\\a=I}"],
 [299,"{\\a=\\i}"],
 [300,"{\\u I}"],
 [301,"{\\u\\i}"],
 [302,"{\\k I}"],
 [303,"{\\k i}"],
 [304,"{\\.I}"],
 [305,"{\\i}"],
 [308,"{\\^J}"],
 [309,"{\\^\\j}"],
 [310,"{\\c K}"],
 [311,"{\\c k}"],
 [313,"{\\a'L}"],
 [314,"{\\a'l}"],
 [315,"{\\c L}"],
 [316,"{\\c l}"],
 [317,"{\\v L}"],
 [318,"{\\v l}"],
 [321,"{\\L}"],
 [322,"{\\l}"],
 [323,"{\\a'N}"],
 [324,"{\\a'n}"],
 [325,"{\\c N}"],
 [326,"{\\c n}"],
 [327,"{\\v N}"],
 [328,"{\\v n}"],
 [330,"{\\NG}"],
 [331,"{\\ng}"],
 [332,"{\\a=O}"],
 [333,"{\\a=o}"],
 [334,"{\\u O}"],
 [335,"{\\u o}"],
 [336,"{\\H O}"],
 [337,"{\\H o}"],
 [338,"{\\OE}"],
 [339,"{\\oe}"],
 [340,"{\\a'R}"],
 [341,"{\\a'r}"],
 [342,"{\\c R}"],
 [343,"{\\c r}"],
 [344,"{\\v R}"],
 [345,"{\\v r}"],
 [346,"{\\a'S}"],
 [347,"{\\a's}"],
 [348,"{\\^S}"],
 [349,"{\\^s}"],
 [350,"{\\c S}"],
 [351,"{\\c s}"],
 [352,"{\\v S}"],
 [353,"{\\v s}"],
 [354,"{\\c T}"],
 [355,"{\\c t}"],
 [356,"{\\v T}"],
 [357,"{\\v t}"],
 [358,"{\\ensuremath{\\bar{\\mathrm{T}}}}"],
 [359,"{\\ensuremath{\\bar{\\mathrm{t}}}}"],
 [360,"{\\~U}"],
 [361,"{\\~u}"],
 [362,"{\\a=U}"],
 [363,"{\\a=u}"],
 [364,"{\\u U}"],
 [365,"{\\u u}"],
 [366,"{\\r U}"],
 [367,"{\\r u}"],
 [368,"{\\H U}"],
 [369,"{\\H u}"],
 [370,"{\\k U}"],
 [371,"{\\k u}"],
 [372,"{\\^W}"],
 [373,"{\\^w}"],
 [374,"{\\^Y}"],
 [375,"{\\^y}"],
 [376,"{\\\"Y}"],
 [377,"{\\a'Z}"],
 [378,"{\\a'z}"],
 [379,"{\\.Z}"],
 [380,"{\\.z}"],
 [381,"{\\v Z}"],
 [382,"{\\v z}"],
 [461,"{\\v A}"],
 [462,"{\\v a}"],
 [463,"{\\v I}"],
 [464,"{\\v\\i}"],
 [465,"{\\v O}"],
 [466,"{\\v o}"],
 [467,"{\\v U}"],
 [468,"{\\v u}"],
 [469,"{\\a={\\\"U}"],
 [470,"{\\a={\\\"u}"],
 [471,"{\\a'{\\\"U}"],
 [472,"{\\a'{\\\"u}"],
 [473,"{\\v{\\\"U}"],
 [474,"{\\v{\\\"u}"],
 [475,"{\\a`{\\\"U}"],
 [476,"{\\a`{\\\"u}"],
 [478,"{\\a={\\\"A}"],
 [479,"{\\a={\\\"a}"],
 [482,"{\\a=\\AE}"],
 [483,"{\\a=\\ae}"],
 [486,"{\\v G}"],
 [487,"{\\v g}"],
 [488,"{\\v K}"],
 [489,"{\\v k}"],
 [490,"{\\k O}"],
 [491,"{\\k o}"],
 [496,"{\\v\\j}"],
 [500,"{\\a'G}"],
 [501,"{\\a'g}"],
 [504,"{\\a`N}"],
 [505,"{\\a`n}"],
 [506,"{\\a'{\\r A}"],
 [507,"{\\a'{\\r a}"],
 [508,"{\\a'\\AE}"],
 [509,"{\\a'\\ae}"],
 [510,"{\\a'\\O}"],
 [511,"{\\a'\\o}"],
 [542,"{\\v H}"],
 [543,"{\\v h}"],
 [550,"{\\.A}"],
 [551,"{\\.a}"],
 [552,"{\\c E}"],
 [553,"{\\c e}"],
 [554,"{\\a={\\\"O}"],
 [555,"{\\a={\\\"o}"],
 [556,"{\\a={\\~O}"],
 [557,"{\\a={\\~o}"],
 [558,"{\\.O}"],
 [559,"{\\.o}"],
 [562,"{\\a=Y}"],
 [563,"{\\a=y}"],
 [697, "{\\ensuremath{'}}"],
 [698, "{\\ensuremath{''}}"],
 [699, "{\\ensuremath{'''}}"],
 [7682,"{\\.B}"],
 [7683,"{\\.b}"],
 [7684,"{\\d B}"],
 [7685,"{\\d b}"],
 [7686,"{\\b B}"],
 [7687,"{\\b b}"],
 [7690,"{\\.D}"],
 [7691,"{\\.d}"],
 [7692,"{\\d D}"],
 [7693,"{\\d d}"],
 [7694,"{\\b D}"],
 [7695,"{\\b d}"],
 [7696,"{\\c D}"],
 [7697,"{\\c d}"],
 [7710,"{\\.F}"],
 [7711,"{\\.f}"],
 [7712,"{\\a=G}"],
 [7713,"{\\a=g}"],
 [7714,"{\\.H}"],
 [7715,"{\\.h}"],
 [7716,"{\\d H}"],
 [7717,"{\\d h}"],
 [7718,"{\\\"H}"],
 [7719,"{\\\"h}"],
 [7720,"{\\c H}"],
 [7721,"{\\c h}"],
 [7728,"{\\a'K}"],
 [7729,"{\\a'k}"],
 [7730,"{\\d K}"],
 [7731,"{\\d k}"],
 [7732,"{\\b K}"],
 [7733,"{\\b k}"],
 [7734,"{\\d L}"],
 [7735,"{\\d l}"],
 [7738,"{\\b L}"],
 [7739,"{\\b l}"],
 [7742,"{\\a'M}"],
 [7743,"{\\a'm}"],
 [7744,"{\\.M}"],
 [7745,"{\\.m}"],
 [7746,"{\\d M}"],
 [7747,"{\\d m}"],
 [7748,"{\\.N}"],
 [7749,"{\\.n}"],
 [7750,"{\\d N}"],
 [7751,"{\\d n}"],
 [7752,"{\\b N}"],
 [7753,"{\\b n}"],
 [7764,"{\\a'P}"],
 [7765,"{\\a'p}"],
 [7766,"{\\.P}"],
 [7767,"{\\.p}"],
 [7768,"{\\.R}"],
 [7769,"{\\.r}"],
 [7770,"{\\d R}"],
 [7771,"{\\d r}"],
 [7774,"{\\b R}"],
 [7775,"{\\b r}"],
 [7776,"{\\.S}"],
 [7777,"{\\.s}"],
 [7778,"{\\d S}"],
 [7779,"{\\d s}"],
 [7786,"{\\.T}"],
 [7787,"{\\.t}"],
 [7788,"{\\d T}"],
 [7789,"{\\d t}"],
 [7790,"{\\b T}"],
 [7791,"{\\b t}"],
 [7804,"{\\~V}"],
 [7805,"{\\~v}"],
 [7806,"{\\d V}"],
 [7807,"{\\d v}"],
 [7808,"{\\a`W}"],
 [7809,"{\\a`w}"],
 [7810,"{\\a'W}"],
 [7811,"{\\a'w}"],
 [7812,"{\\\"W}"],
 [7813,"{\\\"w}"],
 [7814,"{\\.W}"],
 [7815,"{\\.w}"],
 [7816,"{\\d W}"],
 [7817,"{\\d w}"],
 [7818,"{\\.X}"],
 [7819,"{\\.x}"],
 [7820,"{\\\"X}"],
 [7821,"{\\\"x}"],
 [7822,"{\\.Y}"],
 [7823,"{\\.y}"],
 [7824,"{\\^Z}"],
 [7825,"{\\^z}"],
 [7826,"{\\d Z}"],
 [7827,"{\\d z}"],
 [7828,"{\\b Z}"],
 [7829,"{\\b z}"],
 [7830,"{\\b h}"],
 [7831,"{\\\"t}"],
 [7832,"{\\r w}"],
 [7833,"{\\r y}"],
 [7840,"{\\d A}"],
 [7841,"{\\d a}"],
 [7864,"{\\d E}"],
 [7865,"{\\d e}"],
 [7868,"{\\~E}"],
 [7869,"{\\~e}"],
 [7882,"{\\d I}"],
 [7883,"{\\d i}"],
 [7884,"{\\d O}"],
 [7885,"{\\d o}"],
 [7908,"{\\d U}"],
 [7909,"{\\d u}"],
 [7922,"{\\a`Y}"],
 [7923,"{\\a`y}"],
 [7924,"{\\d Y}"],
 [7925,"{\\d y}"],
 [7928,"{\\~Y}"],
 [7929,"{\\~y}"],
 [8192,"{\\enskip}"],
 [8193,"{\\quad}"],
 [8194,"{\\enskip}"],
 [8195,"{\\quad}"],
 [8201,"{\\thinspace}"],
 [8208,"{-}"],
 [8211,"{\\textendash}"],
 [8212,"{\\textemdash}"],
 [8216,"{\\textquoteleft}"],
 [8217,"{\\textquoteright}"],
 [8218,"{\\quotesinglbase}"],
 [8220,"{\\textquotedblleft}"],
 [8221,"{\\textquotedblright}"],
 [8222,"{\\quotedblbase}"],
 [8224,"{\\dag}"],
 [8225,"{\\ddag}"],
 [8226,"{\\textbullet}"],
 [8230,"{\\dots}"],
 [8232,"{\\leavevmode\\newline}"],
 [8240,"{\\textperthousand}"],
 [8241,"{\\textpertenthousand}"],
 [8242,"{\\ensuremath{^\\prime}}"],
 [8243,"{\\ensuremath{^{\\prime\\prime}}"],
 [8244,"{\\ensuremath{^{\\prime\\prime\\prime}}"],
 [8249,"{\\guilsinglleft}"],
 [8250,"{\\guilsinglright}"],
 [8251,"{\\textreferencemark}"],
 [8253,"{\\textinterrobang}"],
 [8304,"{\\textsuperscript0}"],
 [8305,"{\\textsuperscript i}"],
 [8308,"{\\textsuperscript4}"],
 [8309,"{\\textsuperscript5}"],
 [8310,"{\\textsuperscript6}"],
 [8311,"{\\textsuperscript7}"],
 [8312,"{\\textsuperscript8}"],
 [8313,"{\\textsuperscript9}"],
 [8314,"{\\textsuperscript+}"],
 [8315,"{\\textsuperscript-}"],
 [8316,"{\\textsuperscript=}"],
 [8317,"{\\textsuperscript(}"],
 [8318,"{\\textsuperscript)}"],
 [8319,"{\\textsuperscript n}"],
 [8320,"{\\ensuremath{_0}}"],
 [8321,"{\\ensuremath{_1}}"],
 [8322,"{\\ensuremath{_2}}"],
 [8323,"{\\ensuremath{_3}}"],
 [8324,"{\\ensuremath{_4}}"],
 [8325,"{\\ensuremath{_5}}"],
 [8326,"{\\ensuremath{_6}}"],
 [8327,"{\\ensuremath{_7}}"],
 [8328,"{\\ensuremath{_8}}"],
 [8329,"{\\ensuremath{_9}}"],
 [8330,"{\\ensuremath{_+}}"],
 [8331,"{\\ensuremath{_-}}"],
 [8332,"{\\ensuremath{_=}}"],
 [8333,"{\\ensuremath{_(}}"],
 [8334,"{\\ensuremath{_)}}"],
 [8353,"{\\textcolonmonetary}"],
 [8356,"{\\textlira}"],
 [8358,"{\\textnaira}"],
 [8361,"{\\textwon}"],
 [8363,"{\\textdong}"],
 [8364,"{\\ifx\\euro\\undefined\\texteuro\\else\\euro\\fi}"],
 [8450,"{\\ensuremath{\\mathbb C}}"],
 [8460,"{\\ensuremath{\\mathfrak H}}"],
 [8461,"{\\ensuremath{\\mathbb H}}"],
 [8462,"{\\ensuremath{\\mathit h}}"],
 [8463,"{\\ensuremath{\\hbar}}"],
 [8465,"{\\ensuremath{\\Im}}"],
 [8467,"{\\ensuremath{\\ell}}"],
 [8469,"{\\ensuremath{\\mathbb N}}"],
 [8470,"{\\textnumero}"],
 [8472,"{\\ensuremath{\\wp}}"],
 [8473,"{\\ensuremath{\\mathbb P}}"],
 [8474,"{\\ensuremath{\\mathbb Q}}"],
 [8476,"{\\ensuremath{\\Re}}"],
 [8477,"{\\ensuremath{\\mathbb R}}"],
 [8480,"{\\textsuperscript{SM}}"],
 [8482,"{\\texttrademark}"],
 [8484,"{\\ensuremath{\\mathbb Z}}"],
 [8486,"{\\ensuremath{\\Omega}}"],
 [8487,"{\\ensuremath{\\mho}}"],
 [8488,"{\\ensuremath{\\mathfrak Z}}"],
 [8490,"{\\ensuremath{\\mathrm K}}"],
 [8493,"{\\ensuremath{\\mathfrak C}}"],
 [8500,"{\\ensuremath{o}}"],
 [8501,"{\\ensuremath\\aleph}"],
 [8502,"{\\ensuremath\\beth}"],
 [8503,"{\\ensuremath\\gimel}"],
 [8504,"{\\ensuremath\\daleth}"],
 [8592,"{\\ensuremath{\\leftarrow}}"],
 [8593,"{\\ensuremath{\\uparrow}}"],
 [8594,"{\\ensuremath{\\rightarrow}}"],
 [8595,"{\\ensuremath{\\downarrow}}"],
 [8596,"{\\ensuremath{\\leftrightarrow}}"],
 [8597,"{\\ensuremath{\\updownarrow}}"],
 [8605,"{\\ensuremath\\leadsto}"],
 [8652,"{\\ensuremath{\\rightleftharpoons}}"],
 [8658,"{\\ensuremath{\\Rightarrow}}"],
 [8660,"{\\ensuremath{\\Leftrightarrow}}"],
 [8704,"{\\ensuremath{\\forall}}"],
 [8705,"{\\ensuremath\\complement}"],
 [8706,"{\\ensuremath{\\partial}}"],
 [8707,"{\\ensuremath{\\exists}}"],
 [8708,"{\\ensuremath\\nexists}"],
 [8709,"{\\ensuremath{\\emptyset}}"],
 [8710,"{\\ensuremath{\\Delta}}"],
 [8711,"{\\ensuremath{\\nabla}}"],
 [8712,"{\\ensuremath{\\in}}"],
 [8713,"{\\ensuremath{\\notin}}"],
 [8715,"{\\ensuremath{\\ni}}"],
 [8716,"{\\ensuremath{\\not\\ni}}"],
 [8719,"{\\ensuremath{\\prod}}"],
 [8720,"{\\ensuremath{\\coprod}}"],
 [8721,"{\\ensuremath{\\sum}}"],
 [8722,"{\\ensuremath{-}}"],
 [8723,"{\\ensuremath{\\mp}}"],
 [8724,"{\\ensuremath\\dotplus}"],
 [8725,"{\\ensuremath{/}}"],
 [8726,"{\\ensuremath{\\setminus}}"],
 [8727,"{\\ensuremath{\\ast}}"],
 [8728,"{\\ensuremath{\\circ}}"],
 [8729,"{\\ensuremath{\\bullet}}"],
 [8730,"{\\ensuremath{\\surd}}"],
 [8733,"{\\ensuremath{\\propto}}"],
 [8734,"{\\ensuremath{\\infty}}"],
 [8736,"{\\ensuremath{\\angle}}"],
 [8737,"{\\ensuremath\\measuredangle}"],
 [8738,"{\\ensuremath\\sphericalangle}"],
 [8739,"{\\ensuremath{\\mid}}"],
 [8740,"{\\ensuremath\\nmid}"],
 [8741,"{\\ensuremath{\\parallel}}"],
 [8742,"{\\ensuremath\\nparallel}"],
 [8743,"{\\ensuremath{\\wedge}}"],
 [8744,"{\\ensuremath{\\vee}}"],
 [8745,"{\\ensuremath{\\cap}}"],
 [8746,"{\\ensuremath{\\cup}}"],
 [8747,"{\\ensuremath{\\int}}"],
 [8748,"{\\ensuremath\\iint}"],
 [8749,"{\\ensuremath\\iiint}"],
 [8750,"{\\ensuremath{\\oint}}"],
 [8756,"{\\ensuremath\\therefore}"],
 [8757,"{\\ensuremath\\because}"],
 [8758,"{\\ensuremath{:}}"],
 [8764,"{\\ensuremath{\\sim}}"],
 [8765,"{\\ensuremath\\backsim}"],
 [8768,"{\\ensuremath{\\wr}}"],
 [8769,"{\\ensuremath\\nsim}"],
 [8771,"{\\ensuremath{\\simeq}}"],
 [8772,"{\\ensuremath{\\not\\simeq}}"],
 [8773,"{\\ensuremath{\\cong}}"],
 [8775,"{\\ensuremath\\ncong}"],
 [8776,"{\\ensuremath{\\approx}}"],
 [8777,"{\\ensuremath{\\not\\approx}}"],
 [8778,"{\\ensuremath\\approxeq}"],
 [8781,"{\\ensuremath{\\asymp}}"],
 [8782,"{\\ensuremath\\Bumpeq}"],
 [8783,"{\\ensuremath\\bumpeq}"],
 [8784,"{\\ensuremath{\\doteq}}"],
 [8785,"{\\ensuremath\\doteqdot}"],
 [8786,"{\\ensuremath\\fallingdotseq}"],
 [8787,"{\\ensuremath\\risingdotseq}"],
 [8790,"{\\ensuremath\\eqcirc}"],
 [8791,"{\\ensuremath\\circeq}"],
 [8796,"{\\ensuremath\\triangleq}"],
 [8800,"{\\ensuremath{\\neq}}"],
 [8801,"{\\ensuremath{\\equiv}}"],
 [8802,"{\\ensuremath{\\not\\equiv}}"],
 [8804,"{\\ensuremath{\\leq}}"],
 [8805,"{\\ensuremath{\\geq}}"],
 [8806,"{\\ensuremath\\leqq}"],
 [8807,"{\\ensuremath\\geqq}"],
 [8808,"{\\ensuremath\\lneqq}"],
 [8809,"{\\ensuremath\\gneqq}"],
 [8810,"{\\ensuremath{\\ll}}"],
 [8811,"{\\ensuremath{\\gg}}"],
 [8812,"{\\ensuremath\\between}"],
 [8813,"{\\ensuremath{\\not\\asymp}}"],
 [8814,"{\\ensuremath\\nless}"],
 [8815,"{\\ensuremath\\ngtr}"],
 [8816,"{\\ensuremath\\nleq}"],
 [8817,"{\\ensuremath\\ngeq}"],
 [8818,"{\\ensuremath\\lesssim}"],
 [8819,"{\\ensuremath\\gtrsim}"],
 [8820,"{\\ensuremath{\\not\\lesssim}}"],
 [8821,"{\\ensuremath{\\not\\gtrsim}}"],
 [8822,"{\\ensuremath\\lessgtr}"],
 [8823,"{\\ensuremath\\gtrless}"],
 [8826,"{\\ensuremath{\\prec}}"],
 [8827,"{\\ensuremath{\\succ}}"],
 [8828,"{\\ensuremath\\preccurlyeq}"],
 [8829,"{\\ensuremath\\succcurlyeq}"],
 [8830,"{\\ensuremath\\precsim}"],
 [8831,"{\\ensuremath\\succsim}"],
 [8832,"{\\ensuremath\\nprec}"],
 [8833,"{\\ensuremath\\nsucc}"],
 [8834,"{\\ensuremath{\\subset}}"],
 [8835,"{\\ensuremath{\\supset}}"],
 [8836,"{\\ensuremath{\\not\\subset}}"],
 [8837,"{\\ensuremath{\\not\\supset}}"],
 [8838,"{\\ensuremath{\\subseteq}}"],
 [8839,"{\\ensuremath{\\supseteq}}"],
 [8840,"{\\ensuremath\\nsubseteq}"],
 [8841,"{\\ensuremath\\nsupseteq}"],
 [8842,"{\\ensuremath\\subsetneq}"],
 [8843,"{\\ensuremath\\supsetneq}"],
 [8846,"{\\ensuremath{\\uplus}}"],
 [8847,"{\\ensuremath\\sqsubset}"],
 [8848,"{\\ensuremath\\sqsupset}"],
 [8849,"{\\ensuremath{\\sqsubseteq}}"],
 [8850,"{\\ensuremath{\\sqsupseteq}}"],
 [8851,"{\\ensuremath{\\sqcap}}"],
 [8852,"{\\ensuremath{\\sqcup}}"],
 [8853,"{\\ensuremath{\\oplus}}"],
 [8854,"{\\ensuremath{\\ominus}}"],
 [8855,"{\\ensuremath{\\otimes}}"],
 [8856,"{\\ensuremath{\\oslash}}"],
 [8857,"{\\ensuremath{\\odot}}"],
 [8858,"{\\ensuremath\\circledcirc}"],
 [8859,"{\\ensuremath\\circledast}"],
 [8861,"{\\ensuremath\\circleddash}"],
 [8862,"{\\ensuremath\\boxplus}"],
 [8863,"{\\ensuremath\\boxminus}"],
 [8864,"{\\ensuremath\\boxtimes}"],
 [8865,"{\\ensuremath\\boxdot}"],
 [8866,"{\\ensuremath{\\vdash}}"],
 [8867,"{\\ensuremath{\\dashv}}"],
 [8868,"{\\ensuremath{\\top}}"],
 [8869,"{\\ensuremath{\\bot}}"],
 [8873,"{\\ensuremath\\Vdash}"],
 [8874,"{\\ensuremath\\Vvdash}"],
 [8878,"{\\ensuremath\\nVdash}"],
 [8882,"{\\ensuremath\\lhd}"],
 [8883,"{\\ensuremath\\rhd}"],
 [8884,"{\\ensuremath\\unlhd}"],
 [8885,"{\\ensuremath\\unrhd}"],
 [8888,"{\\ensuremath\\multimap}"],
 [8890,"{\\ensuremath\\intercal}"],
 [8891,"{\\ensuremath\\veebar}"],
 [8892,"{\\ensuremath\\barwedge}"],
 [8896,"{\\ensuremath{\\bigwedge}}"],
 [8897,"{\\ensuremath{\\bigvee}}"],
 [8898,"{\\ensuremath{\\bigcap}}"],
 [8899,"{\\ensuremath{\\bigcup}}"],
 [8900,"{\\ensuremath{\\diamond}}"],
 [8901,"{\\ensuremath{\\cdot}}"],
 [8902,"{\\ensuremath{\\star}}"],
 [8903,"{\\ensuremath\\divideontimes}"],
 [8904,"{\\ensuremath{\\bowtie}}"],
 [8905,"{\\ensuremath\\ltimes}"],
 [8906,"{\\ensuremath\\rtimes}"],
 [8907,"{\\ensuremath\\leftthreetimes}"],
 [8908,"{\\ensuremath\\rightthreetimes}"],
 [8909,"{\\ensuremath\\backsimeq}"],
 [8910,"{\\ensuremath\\curlyvee}"],
 [8911,"{\\ensuremath\\curlywedge}"],
 [8912,"{\\ensuremath\\Subset}"],
 [8913,"{\\ensuremath\\Supset}"],
 [8914,"{\\ensuremath\\Cap}"],
 [8915,"{\\ensuremath\\Cup}"],
 [8916,"{\\ensuremath\\pitchfork}"],
 [8918,"{\\ensuremath\\lessdot}"],
 [8919,"{\\ensuremath\\gtrdot}"],
 [8920,"{\\ensuremath\\lll}"],
 [8921,"{\\ensuremath\\ggg}"],
 [8922,"{\\ensuremath\\lesseqgtr}"],
 [8923,"{\\ensuremath\\gtreqless}"],
 [8926,"{\\ensuremath\\curlyeqprec}"],
 [8927,"{\\ensuremath\\curlyeqsucc}"],
 [8928,"{\\ensuremath{\\not\\preccurlyeq}}"],
 [8929,"{\\ensuremath{\\not\\succcurlyeq}}"],
 [8930,"{\\ensuremath{\\not\\sqsubseteq}}"],
 [8931,"{\\ensuremath{\\not\\sqsupseteq}}"],
 [8934,"{\\ensuremath\\lnsim}"],
 [8935,"{\\ensuremath\\gnsim}"],
 [8936,"{\\ensuremath\\precnsim}"],
 [8937,"{\\ensuremath\\succnsim}"],
 [8938,"{\\ensuremath\\ntriangleleft}"],
 [8939,"{\\ensuremath\\ntriangleright}"],
 [8940,"{\\ensuremath\\ntrianglelefteq}"],
 [8941,"{\\ensuremath\\ntrianglerighteq}"],
 [8942,"{\\ensuremath{\\vdots}}"],
 [8943,"{\\ensuremath{\\cdots}}"],
 [8945,"{\\ensuremath{\\ddots}}"],
 [8968,"{\\ensuremath{\\lceil}}"],
 [8969,"{\\ensuremath{\\rceil}}"],
 [8970,"{\\ensuremath{\\lfloor}}"],
 [8971,"{\\ensuremath{\\rfloor}}"],
 [9633,"{\\ensuremath\\Box}"],
 [9671,"{\\ensuremath\\Diamond}"],
 [9824,"{\\ensuremath{\\spadesuit}}"],
 [9825,"{\\ensuremath{\\heartsuit}}"],
 [9826,"{\\ensuremath{\\diamondsuit}}"],
 [9827,"{\\ensuremath{\\clubsuit}}"],
 [9837,"{\\ensuremath{\\flat}}"],
 [9838,"{\\ensuremath{\\natural}}"],
 [9839,"{\\ensuremath{\\sharp}}"],
 [10216,"{\\ensuremath{\\langle}}"],
 [10217,"{\\ensuremath{\\rangle}}"],
 [119808,"{\\ensuremath{\\mathbf A}}"],
 [119809,"{\\ensuremath{\\mathbf B}}"],
 [119810,"{\\ensuremath{\\mathbf C}}"],
 [119811,"{\\ensuremath{\\mathbf D}}"],
 [119812,"{\\ensuremath{\\mathbf E}}"],
 [119813,"{\\ensuremath{\\mathbf F}}"],
 [119814,"{\\ensuremath{\\mathbf G}}"],
 [119815,"{\\ensuremath{\\mathbf H}}"],
 [119816,"{\\ensuremath{\\mathbf I}}"],
 [119817,"{\\ensuremath{\\mathbf J}}"],
 [119818,"{\\ensuremath{\\mathbf K}}"],
 [119819,"{\\ensuremath{\\mathbf L}}"],
 [119820,"{\\ensuremath{\\mathbf M}}"],
 [119821,"{\\ensuremath{\\mathbf N}}"],
 [119822,"{\\ensuremath{\\mathbf O}}"],
 [119823,"{\\ensuremath{\\mathbf P}}"],
 [119824,"{\\ensuremath{\\mathbf Q}}"],
 [119825,"{\\ensuremath{\\mathbf R}}"],
 [119826,"{\\ensuremath{\\mathbf S}}"],
 [119827,"{\\ensuremath{\\mathbf T}}"],
 [119828,"{\\ensuremath{\\mathbf U}}"],
 [119829,"{\\ensuremath{\\mathbf V}}"],
 [119830,"{\\ensuremath{\\mathbf W}}"],
 [119831,"{\\ensuremath{\\mathbf X}}"],
 [119832,"{\\ensuremath{\\mathbf Y}}"],
 [119833,"{\\ensuremath{\\mathbf Z}}"],
 [119834,"{\\ensuremath{\\mathbf a}}"],
 [119835,"{\\ensuremath{\\mathbf b}}"],
 [119836,"{\\ensuremath{\\mathbf c}}"],
 [119837,"{\\ensuremath{\\mathbf d}}"],
 [119838,"{\\ensuremath{\\mathbf e}}"],
 [119839,"{\\ensuremath{\\mathbf f}}"],
 [119840,"{\\ensuremath{\\mathbf g}}"],
 [119841,"{\\ensuremath{\\mathbf h}}"],
 [119842,"{\\ensuremath{\\mathbf i}}"],
 [119843,"{\\ensuremath{\\mathbf j}}"],
 [119844,"{\\ensuremath{\\mathbf k}}"],
 [119845,"{\\ensuremath{\\mathbf l}}"],
 [119846,"{\\ensuremath{\\mathbf m}}"],
 [119847,"{\\ensuremath{\\mathbf n}}"],
 [119848,"{\\ensuremath{\\mathbf o}}"],
 [119849,"{\\ensuremath{\\mathbf p}}"],
 [119850,"{\\ensuremath{\\mathbf q}}"],
 [119851,"{\\ensuremath{\\mathbf r}}"],
 [119852,"{\\ensuremath{\\mathbf s}}"],
 [119853,"{\\ensuremath{\\mathbf t}}"],
 [119854,"{\\ensuremath{\\mathbf u}}"],
 [119855,"{\\ensuremath{\\mathbf v}}"],
 [119856,"{\\ensuremath{\\mathbf w}}"],
 [119857,"{\\ensuremath{\\mathbf x}}"],
 [119858,"{\\ensuremath{\\mathbf y}}"],
 [119859,"{\\ensuremath{\\mathbf z}}"],
 [119860,"{\\ensuremath{\\mathit A}}"],
 [119861,"{\\ensuremath{\\mathit B}}"],
 [119862,"{\\ensuremath{\\mathit C}}"],
 [119863,"{\\ensuremath{\\mathit D}}"],
 [119864,"{\\ensuremath{\\mathit E}}"],
 [119865,"{\\ensuremath{\\mathit F}}"],
 [119866,"{\\ensuremath{\\mathit G}}"],
 [119867,"{\\ensuremath{\\mathit H}}"],
 [119868,"{\\ensuremath{\\mathit I}}"],
 [119869,"{\\ensuremath{\\mathit J}}"],
 [119870,"{\\ensuremath{\\mathit K}}"],
 [119871,"{\\ensuremath{\\mathit L}}"],
 [119872,"{\\ensuremath{\\mathit M}}"],
 [119873,"{\\ensuremath{\\mathit N}}"],
 [119874,"{\\ensuremath{\\mathit O}}"],
 [119875,"{\\ensuremath{\\mathit P}}"],
 [119876,"{\\ensuremath{\\mathit Q}}"],
 [119877,"{\\ensuremath{\\mathit R}}"],
 [119878,"{\\ensuremath{\\mathit S}}"],
 [119879,"{\\ensuremath{\\mathit T}}"],
 [119880,"{\\ensuremath{\\mathit U}}"],
 [119881,"{\\ensuremath{\\mathit V}}"],
 [119882,"{\\ensuremath{\\mathit W}}"],
 [119883,"{\\ensuremath{\\mathit X}}"],
 [119884,"{\\ensuremath{\\mathit Y}}"],
 [119885,"{\\ensuremath{\\mathit Z}}"],
 [119886,"{\\ensuremath{\\mathit a}}"],
 [119887,"{\\ensuremath{\\mathit b}}"],
 [119888,"{\\ensuremath{\\mathit c}}"],
 [119889,"{\\ensuremath{\\mathit d}}"],
 [119890,"{\\ensuremath{\\mathit e}}"],
 [119891,"{\\ensuremath{\\mathit f}}"],
 [119892,"{\\ensuremath{\\mathit g}}"],
 [119894,"{\\ensuremath{\\mathit i}}"],
 [119895,"{\\ensuremath{\\mathit j}}"],
 [119896,"{\\ensuremath{\\mathit k}}"],
 [119897,"{\\ensuremath{\\mathit l}}"],
 [119898,"{\\ensuremath{\\mathit m}}"],
 [119899,"{\\ensuremath{\\mathit n}}"],
 [119900,"{\\ensuremath{\\mathit o}}"],
 [119901,"{\\ensuremath{\\mathit p}}"],
 [119902,"{\\ensuremath{\\mathit q}}"],
 [119903,"{\\ensuremath{\\mathit r}}"],
 [119904,"{\\ensuremath{\\mathit s}}"],
 [119905,"{\\ensuremath{\\mathit t}}"],
 [119906,"{\\ensuremath{\\mathit u}}"],
 [119907,"{\\ensuremath{\\mathit v}}"],
 [119908,"{\\ensuremath{\\mathit w}}"],
 [119909,"{\\ensuremath{\\mathit x}}"],
 [119910,"{\\ensuremath{\\mathit y}}"],
 [119911,"{\\ensuremath{\\mathit z}}"],
 [120068,"{\\ensuremath{\\mathfrak A}}"],
 [120069,"{\\ensuremath{\\mathfrak B}}"],
 [120071,"{\\ensuremath{\\mathfrak D}}"],
 [120072,"{\\ensuremath{\\mathfrak E}}"],
 [120073,"{\\ensuremath{\\mathfrak F}}"],
 [120074,"{\\ensuremath{\\mathfrak G}}"],
 [120077,"{\\ensuremath{\\mathfrak J}}"],
 [120078,"{\\ensuremath{\\mathfrak K}}"],
 [120079,"{\\ensuremath{\\mathfrak L}}"],
 [120080,"{\\ensuremath{\\mathfrak M}}"],
 [120081,"{\\ensuremath{\\mathfrak N}}"],
 [120082,"{\\ensuremath{\\mathfrak O}}"],
 [120083,"{\\ensuremath{\\mathfrak P}}"],
 [120084,"{\\ensuremath{\\mathfrak Q}}"],
 [120086,"{\\ensuremath{\\mathfrak S}}"],
 [120087,"{\\ensuremath{\\mathfrak T}}"],
 [120088,"{\\ensuremath{\\mathfrak U}}"],
 [120089,"{\\ensuremath{\\mathfrak V}}"],
 [120090,"{\\ensuremath{\\mathfrak W}}"],
 [120091,"{\\ensuremath{\\mathfrak X}}"],
 [120092,"{\\ensuremath{\\mathfrak Y}}"],
 [120094,"{\\ensuremath{\\mathfrak a}}"],
 [120095,"{\\ensuremath{\\mathfrak b}}"],
 [120096,"{\\ensuremath{\\mathfrak c}}"],
 [120097,"{\\ensuremath{\\mathfrak d}}"],
 [120098,"{\\ensuremath{\\mathfrak e}}"],
 [120099,"{\\ensuremath{\\mathfrak f}}"],
 [120100,"{\\ensuremath{\\mathfrak g}}"],
 [120101,"{\\ensuremath{\\mathfrak h}}"],
 [120102,"{\\ensuremath{\\mathfrak i}}"],
 [120103,"{\\ensuremath{\\mathfrak j}}"],
 [120104,"{\\ensuremath{\\mathfrak k}}"],
 [120105,"{\\ensuremath{\\mathfrak l}}"],
 [120106,"{\\ensuremath{\\mathfrak m}}"],
 [120107,"{\\ensuremath{\\mathfrak n}}"],
 [120108,"{\\ensuremath{\\mathfrak o}}"],
 [120109,"{\\ensuremath{\\mathfrak p}}"],
 [120110,"{\\ensuremath{\\mathfrak q}}"],
 [120111,"{\\ensuremath{\\mathfrak r}}"],
 [120112,"{\\ensuremath{\\mathfrak s}}"],
 [120113,"{\\ensuremath{\\mathfrak t}}"],
 [120114,"{\\ensuremath{\\mathfrak u}}"],
 [120115,"{\\ensuremath{\\mathfrak v}}"],
 [120116,"{\\ensuremath{\\mathfrak w}}"],
 [120117,"{\\ensuremath{\\mathfrak x}}"],
 [120118,"{\\ensuremath{\\mathfrak y}}"],
 [120119,"{\\ensuremath{\\mathfrak z}}"],
 [120120,"{\\ensuremath{\\mathbb A}}"],
 [120121,"{\\ensuremath{\\mathbb B}}"],
 [120123,"{\\ensuremath{\\mathbb D}}"],
 [120124,"{\\ensuremath{\\mathbb E}}"],
 [120125,"{\\ensuremath{\\mathbb F}}"],
 [120126,"{\\ensuremath{\\mathbb G}}"],
 [120128,"{\\ensuremath{\\mathbb I}}"],
 [120129,"{\\ensuremath{\\mathbb J}}"],
 [120130,"{\\ensuremath{\\mathbb K}}"],
 [120131,"{\\ensuremath{\\mathbb L}}"],
 [120132,"{\\ensuremath{\\mathbb M}}"],
 [120134,"{\\ensuremath{\\mathbb O}}"],
 [120138,"{\\ensuremath{\\mathbb S}}"],
 [120139,"{\\ensuremath{\\mathbb T}}"],
 [120140,"{\\ensuremath{\\mathbb U}}"],
 [120141,"{\\ensuremath{\\mathbb V}}"],
 [120142,"{\\ensuremath{\\mathbb W}}"],
 [120143,"{\\ensuremath{\\mathbb X}}"],
 [120144,"{\\ensuremath{\\mathbb Y}}"],
 [120146,"{\\ensuremath{\\mathbb a}}"],
 [120147,"{\\ensuremath{\\mathbb b}}"],
 [120148,"{\\ensuremath{\\mathbb c}}"],
 [120149,"{\\ensuremath{\\mathbb d}}"],
 [120150,"{\\ensuremath{\\mathbb e}}"],
 [120151,"{\\ensuremath{\\mathbb f}}"],
 [120152,"{\\ensuremath{\\mathbb g}}"],
 [120153,"{\\ensuremath{\\mathbb h}}"],
 [120154,"{\\ensuremath{\\mathbb i}}"],
 [120155,"{\\ensuremath{\\mathbb j}}"],
 [120156,"{\\ensuremath{\\mathbb k}}"],
 [120157,"{\\ensuremath{\\mathbb l}}"],
 [120158,"{\\ensuremath{\\mathbb m}}"],
 [120159,"{\\ensuremath{\\mathbb n}}"],
 [120160,"{\\ensuremath{\\mathbb o}}"],
 [120161,"{\\ensuremath{\\mathbb p}}"],
 [120162,"{\\ensuremath{\\mathbb q}}"],
 [120163,"{\\ensuremath{\\mathbb r}}"],
 [120164,"{\\ensuremath{\\mathbb s}}"],
 [120165,"{\\ensuremath{\\mathbb t}}"],
 [120166,"{\\ensuremath{\\mathbb u}}"],
 [120167,"{\\ensuremath{\\mathbb v}}"],
 [120168,"{\\ensuremath{\\mathbb w}}"],
 [120169,"{\\ensuremath{\\mathbb x}}"],
 [120170,"{\\ensuremath{\\mathbb y}}"],
 [120171,"{\\ensuremath{\\mathbb z}}"],
 [120224,"{\\ensuremath{\\mathsf A}}"],
 [120225,"{\\ensuremath{\\mathsf B}}"],
 [120226,"{\\ensuremath{\\mathsf C}}"],
 [120227,"{\\ensuremath{\\mathsf D}}"],
 [120228,"{\\ensuremath{\\mathsf E}}"],
 [120229,"{\\ensuremath{\\mathsf F}}"],
 [120230,"{\\ensuremath{\\mathsf G}}"],
 [120231,"{\\ensuremath{\\mathsf H}}"],
 [120232,"{\\ensuremath{\\mathsf I}}"],
 [120233,"{\\ensuremath{\\mathsf J}}"],
 [120234,"{\\ensuremath{\\mathsf K}}"],
 [120235,"{\\ensuremath{\\mathsf L}}"],
 [120236,"{\\ensuremath{\\mathsf M}}"],
 [120237,"{\\ensuremath{\\mathsf N}}"],
 [120238,"{\\ensuremath{\\mathsf O}}"],
 [120239,"{\\ensuremath{\\mathsf P}}"],
 [120240,"{\\ensuremath{\\mathsf Q}}"],
 [120241,"{\\ensuremath{\\mathsf R}}"],
 [120242,"{\\ensuremath{\\mathsf S}}"],
 [120243,"{\\ensuremath{\\mathsf T}}"],
 [120244,"{\\ensuremath{\\mathsf U}}"],
 [120245,"{\\ensuremath{\\mathsf V}}"],
 [120246,"{\\ensuremath{\\mathsf W}}"],
 [120247,"{\\ensuremath{\\mathsf X}}"],
 [120248,"{\\ensuremath{\\mathsf Y}}"],
 [120249,"{\\ensuremath{\\mathsf Z}}"],
 [120250,"{\\ensuremath{\\mathsf a}}"],
 [120251,"{\\ensuremath{\\mathsf b}}"],
 [120252,"{\\ensuremath{\\mathsf c}}"],
 [120253,"{\\ensuremath{\\mathsf d}}"],
 [120254,"{\\ensuremath{\\mathsf e}}"],
 [120255,"{\\ensuremath{\\mathsf f}}"],
 [120256,"{\\ensuremath{\\mathsf g}}"],
 [120257,"{\\ensuremath{\\mathsf h}}"],
 [120258,"{\\ensuremath{\\mathsf i}}"],
 [120259,"{\\ensuremath{\\mathsf j}}"],
 [120260,"{\\ensuremath{\\mathsf k}}"],
 [120261,"{\\ensuremath{\\mathsf l}}"],
 [120262,"{\\ensuremath{\\mathsf m}}"],
 [120263,"{\\ensuremath{\\mathsf n}}"],
 [120264,"{\\ensuremath{\\mathsf o}}"],
 [120265,"{\\ensuremath{\\mathsf p}}"],
 [120266,"{\\ensuremath{\\mathsf q}}"],
 [120267,"{\\ensuremath{\\mathsf r}}"],
 [120268,"{\\ensuremath{\\mathsf s}}"],
 [120269,"{\\ensuremath{\\mathsf t}}"],
 [120270,"{\\ensuremath{\\mathsf u}}"],
 [120271,"{\\ensuremath{\\mathsf v}}"],
 [120272,"{\\ensuremath{\\mathsf w}}"],
 [120273,"{\\ensuremath{\\mathsf x}}"],
 [120274,"{\\ensuremath{\\mathsf y}}"],
 [120275,"{\\ensuremath{\\mathsf z}}"],
 [120432,"{\\ensuremath{\\mathtt A}}"],
 [120433,"{\\ensuremath{\\mathtt B}}"],
 [120434,"{\\ensuremath{\\mathtt C}}"],
 [120435,"{\\ensuremath{\\mathtt D}}"],
 [120436,"{\\ensuremath{\\mathtt E}}"],
 [120437,"{\\ensuremath{\\mathtt F}}"],
 [120438,"{\\ensuremath{\\mathtt G}}"],
 [120439,"{\\ensuremath{\\mathtt H}}"],
 [120440,"{\\ensuremath{\\mathtt I}}"],
 [120441,"{\\ensuremath{\\mathtt J}}"],
 [120442,"{\\ensuremath{\\mathtt K}}"],
 [120443,"{\\ensuremath{\\mathtt L}}"],
 [120444,"{\\ensuremath{\\mathtt M}}"],
 [120445,"{\\ensuremath{\\mathtt N}}"],
 [120446,"{\\ensuremath{\\mathtt O}}"],
 [120447,"{\\ensuremath{\\mathtt P}}"],
 [120448,"{\\ensuremath{\\mathtt Q}}"],
 [120449,"{\\ensuremath{\\mathtt R}}"],
 [120450,"{\\ensuremath{\\mathtt S}}"],
 [120451,"{\\ensuremath{\\mathtt T}}"],
 [120452,"{\\ensuremath{\\mathtt U}}"],
 [120453,"{\\ensuremath{\\mathtt V}}"],
 [120454,"{\\ensuremath{\\mathtt W}}"],
 [120455,"{\\ensuremath{\\mathtt X}}"],
 [120456,"{\\ensuremath{\\mathtt Y}}"],
 [120457,"{\\ensuremath{\\mathtt Z}}"],
 [120458,"{\\ensuremath{\\mathtt a}}"],
 [120459,"{\\ensuremath{\\mathtt b}}"],
 [120460,"{\\ensuremath{\\mathtt c}}"],
 [120461,"{\\ensuremath{\\mathtt d}}"],
 [120462,"{\\ensuremath{\\mathtt e}}"],
 [120463,"{\\ensuremath{\\mathtt f}}"],
 [120464,"{\\ensuremath{\\mathtt g}}"],
 [120465,"{\\ensuremath{\\mathtt h}}"],
 [120466,"{\\ensuremath{\\mathtt i}}"],
 [120467,"{\\ensuremath{\\mathtt j}}"],
 [120468,"{\\ensuremath{\\mathtt k}}"],
 [120469,"{\\ensuremath{\\mathtt l}}"],
 [120470,"{\\ensuremath{\\mathtt m}}"],
 [120471,"{\\ensuremath{\\mathtt n}}"],
 [120472,"{\\ensuremath{\\mathtt o}}"],
 [120473,"{\\ensuremath{\\mathtt p}}"],
 [120474,"{\\ensuremath{\\mathtt q}}"],
 [120475,"{\\ensuremath{\\mathtt r}}"],
 [120476,"{\\ensuremath{\\mathtt s}}"],
 [120477,"{\\ensuremath{\\mathtt t}}"],
 [120478,"{\\ensuremath{\\mathtt u}}"],
 [120479,"{\\ensuremath{\\mathtt v}}"],
 [120480,"{\\ensuremath{\\mathtt w}}"],
 [120481,"{\\ensuremath{\\mathtt x}}"],
 [120482,"{\\ensuremath{\\mathtt y}}"],
 [120483,"{\\ensuremath{\\mathtt z}}"],
 [120782,"{\\ensuremath{\\mathbf0}}"],
 [120783,"{\\ensuremath{\\mathbf1}}"],
 [120784,"{\\ensuremath{\\mathbf2}}"],
 [120785,"{\\ensuremath{\\mathbf3}}"],
 [120786,"{\\ensuremath{\\mathbf4}}"],
 [120787,"{\\ensuremath{\\mathbf5}}"],
 [120788,"{\\ensuremath{\\mathbf6}}"],
 [120789,"{\\ensuremath{\\mathbf7}}"],
 [120790,"{\\ensuremath{\\mathbf8}}"],
 [120791,"{\\ensuremath{\\mathbf9}}"],
 [120793,"{\\ensuremath{\\mathbb 1}}"],
 [120794,"{\\ensuremath{\\mathbb 2}}"],
 [120802,"{\\ensuremath{\\mathsf0}}"],
 [120803,"{\\ensuremath{\\mathsf1}}"],
 [120804,"{\\ensuremath{\\mathsf2}}"],
 [120805,"{\\ensuremath{\\mathsf3}}"],
 [120806,"{\\ensuremath{\\mathsf4}}"],
 [120807,"{\\ensuremath{\\mathsf5}}"],
 [120808,"{\\ensuremath{\\mathsf6}}"],
 [120809,"{\\ensuremath{\\mathsf7}}"],
 [120810,"{\\ensuremath{\\mathsf8}}"],
 [120811,"{\\ensuremath{\\mathsf9}}"],
 [120822,"{\\ensuremath{\\mathtt0}}"],
 [120823,"{\\ensuremath{\\mathtt1}}"],
 [120824,"{\\ensuremath{\\mathtt2}}"],
 [120825,"{\\ensuremath{\\mathtt3}}"],
 [120826,"{\\ensuremath{\\mathtt4}}"],
 [120827,"{\\ensuremath{\\mathtt5}}"],
 [120828,"{\\ensuremath{\\mathtt6}}"],
 [120829,"{\\ensuremath{\\mathtt7}}"],
 [120830,"{\\ensuremath{\\mathtt8}}"],
 [120831,"{\\ensuremath{\\mathtt9}}"]
 ]);


# wrap and cache integers as unicode characters
InstallMethod(UChar, [IsInt], function(n)
  local res;
  if not IsInt(n) or n < 0 or n > 2097151 then
    return fail;
  fi;
  if IsBound(UNICODECHARCACHE[n]) then
    return UNICODECHARCACHE[n];
  fi;
  res := rec(codepoint := n);
  Objectify(UnicodeCharacterType, res);
  UNICODECHARCACHE[n] := res;
  return res;
end);
# interpret GAP characters as latin 1 encoded
InstallMethod(UChar, [IsChar], function(c)
  return UChar(INT_CHAR(c));
end);

# viewing and printing unicode characters
InstallMethod(ViewObj, [IsUnicodeCharacter], function(c)
  Print("'", UNICODE_RECODE.UTF8UnicodeChar(c!.codepoint), "'");
end);
InstallMethod(PrintObj, [IsUnicodeCharacter], function(c)
  Print("UChar(",c!.codepoint,")");
end);
# \=
InstallMethod(\=, [IsUnicodeCharacter, IsUnicodeCharacter],
function(c, d)
  return c!.codepoint = d!.codepoint;
end);
InstallOtherMethod(Int, [IsUnicodeCharacter], function(uc)
  return uc!.codepoint;
end);

##  <#GAPDoc Label="Unicode">
##  <ManSection>
##  <Heading>Recoding to and from Unicode</Heading>
##  <Oper Name="Unicode" Arg="list[, encoding]"/>
##  <Oper Name="UChar" Arg="num"/>
##  <Filt Name="IsUnicodeString" />
##  <Filt Name="IsUnicodeCharacter" />
##  <Func Name="IntListUnicodeString" Arg="ustr" />
##  <Oper Name="Encode" Arg="ustr[, encoding]" />
##  <Var Name="LaTeXUnicodeTable" />
##  
##  <Description>
##  Unicode characters are described by their <Emph>codepoint</Emph>, an
##  integer in the range from <M>0</M> to <M>2^{21}-1</M>. 
##  For details about unicode, see <URL>http://www.unicode.org</URL>.<P/>
##  
##  The function <Ref Oper="UChar"/> wraps an integer <A>num</A> into
##  a &GAP; object lying in the filter <Ref Filt="IsUnicodeCharacter"/>.
##  Use <C>Int</C> to get the codepoint back. The argument <A>num</A> can
##  also be a &GAP; character which is then translated to an integer via 
##  <Ref BookName="Reference" Func="INT_CHAR"/>. <P/>
##  
##  <Ref Oper="Unicode" /> produces a &GAP; object in the filter
##  <Ref Filt="IsUnicodeString"/>. This is a wrapped list of integers 
##  for the unicode characters in the string. The function <Ref
##  Func="IntListUnicodeString"/> gives access to this list of integers. 
##  Basic list functionality is available for <Ref Filt="IsUnicodeString"/>
##  elements. The entries are in <Ref Filt="IsUnicodeCharacter"/>.
##  The argument <A>list</A> for <Ref Oper="Unicode"/> is either a list of
##  integers or a &GAP; string. In the latter case an <A>encoding</A> can be
##  specified as string, its default is <C>"UTF-8"</C>. <P/>
##  
##  Currently supported encodings can be found in
##  <C>UNICODE&uscore;RECODE.NormalizedEncodings</C> (ASCII, 
##  ISO-8859-X, UTF-8 and aliases). The encoding <C>"XML"</C> means an ASCII
##  encoding in which non-ASCII characters are specified by XML character
##  entities. <P/>
##  
##  The operation <Ref Oper="Encode"/> translates a unicode string <A>ustr</A>
##  into a &GAP; string in some specified <A>encoding</A>. The default
##  encoding is <C>"UTF-8"</C>. <P/>
##  
##  There is also an encoding <C>"LaTeX"</C> which can only be used with
##  <Ref Oper="Encode"/> but not with <Ref Oper="Unicode"/>. It substitutes 
##  non-ASCII characters by &LaTeX; code as given in an ordered list 
##  <C>LaTeXUnicodeTable</C> of pairs [codepoint, string]. If you have a
##  unicode character for which no substitution is contained in that list,
##  then find a substitution and add a corresponding [codepoint, string] 
##  pair to  <C>LaTeXUnicodeTable</C> using <Ref BookName="reference"
##  Oper="AddSet"/>. Also, please, tell the &GAPDoc; authors about your 
##  addition, such that we can extend the list <C>LaTeXUnicodeTable</C>.
##  <Example>
##  ???
##  </Example>
##  </Description>
##  </ManSection>
##  
##  <#/GAPDoc>
##  

# NC method, assume that l is (plain?) list of integers in correct range
InstallMethod(Unicode, [IsList], function(l)
  local res;
  res := [l];
  Objectify(UnicodeStringType, res);
  return res;
end);
# extract the list of integers
InstallGlobalFunction("IntListUnicodeString", function(ustr)
  return ustr![1];
end);


InstallMethod(Unicode, [IsString, IsString], function(str, enc)
  local res;
  if Length(str) > 0 and not IsStringRep(str) then
    Info(InfoWarning, 1, "#W Changing argument to IsStringRep");
    Info(InfoWarning, 2, ":\n ", str);
    Info(InfoWarning, 1, "\n");
    ConvertToStringRep(str);
  fi;
  if not IsBound(UNICODE_RECODE.NormalizedEncodings.(enc)) then
    Error("Sorry, only the following encodings are supported for 'Unicode':\n",
              RecFields(UNICODE_RECODE.Decoder), "\n");
  fi;
  enc := UNICODE_RECODE.NormalizedEncodings.(enc);
  res := UNICODE_RECODE.Decoder.(enc)(str);
  if res = fail then
    return fail;
  fi;
  return Unicode(UNICODE_RECODE.Decoder.(enc)(str));
end);
# just a string as argument is assumed to be in UTF-8 encoding
InstallMethod(Unicode, [IsStringRep], function(str)
  return Unicode(str, "UTF-8");
end);

# view and print 
InstallMethod(ViewObj, [IsUnicodeString], function(ustr)
  local l;
  l := IntListUnicodeString(ustr);
  if Length(l) > 40 then
    l := l{[1..37]};
    Append(l, [46,46,46]);
  fi;
  Print("Unicode(");
  ViewObj(Concatenation(List(l, UNICODE_RECODE.UTF8UnicodeChar)));
  Print(")");
end);
InstallMethod(PrintObj, [IsUnicodeString], function(ustr)
  Print("Unicode(");
  PrintObj(Concatenation(List(IntListUnicodeString(ustr), 
           UNICODE_RECODE.UTF8UnicodeChar)));
  Print(")");
end);

# the *basic* list operations
InstallMethod(Length, [IsUnicodeString], function(ustr)
  return Length(IntListUnicodeString(ustr));
end);

InstallMethod(\[\], [IsUnicodeString, IsPosInt], function(ustr, i)
  return UChar(IntListUnicodeString(ustr)[i]);
end);

InstallOtherMethod(\[\]\:\=, [IsUnicodeString and IsMutable, 
                              IsPosInt, IsUnicodeCharacter], 
function(ustr, i, x)
  local l;
  if i > Length(ustr)+1 then
    Error("no unicode string assignment at position ",i,"\n");
  fi;
  l := IntListUnicodeString(ustr);
  l[i] := x!.codepoint;
end);

InstallMethod(Unbind\[\], [IsUnicodeString and IsMutable, IsPosInt],
function(ustr, i)
  local l;
  if i < Length(ustr) then
    Error("can only unbind last character in unicode string\n");
  fi;
  if i = Length(ustr) then
    l := IntListUnicodeString(ustr);
    Unbind(l[Length(l)]);
  fi;
end);

# let ShallowCopy produce a unicode string
InstallMethod(ShallowCopy, [IsUnicodeString], function(ustr)
  return Unicode(ShallowCopy(IntListUnicodeString(ustr)));
end);
# let sublists be unicode strings
InstallMethod(\{\}, [IsUnicodeString, IsList], function(ustr, poss)
  return Unicode(IntListUnicodeString(ustr){poss});
end);

# a better Append for efficiency
InstallMethod(Append, [IsUnicodeString and IsMutable, IsUnicodeString],
function(ustr, ustr2)
  Append(IntListUnicodeString(ustr), IntListUnicodeString(ustr2));
end);

# better \= for efficiency
InstallMethod(\=, [IsUnicodeString, IsUnicodeString], function(ustr1, ustr2)
  return IntListUnicodeString(ustr1) = IntListUnicodeString(ustr2);
end);

# better Position, PositionSublist
InstallMethod(Position, [IsUnicodeString, IsUnicodeCharacter],
function(ustr, c)
  return Position(IntListUnicodeString(ustr), c!.codepoint);
end);
InstallMethod(Position, [IsUnicodeString, IsUnicodeCharacter, IsInt],
function(ustr, c, pos)
  return Position(IntListUnicodeString(ustr), c!.codepoint, pos);
end);
InstallOtherMethod(PositionSublist, [IsUnicodeString, IsUnicodeString],
function(ustr, ustr2)
  return PositionSublist(IntListUnicodeString(ustr),
                                            IntListUnicodeString(ustr2));
end);
InstallMethod(PositionSublist, [IsUnicodeString, IsUnicodeString, IsInt],
function(ustr, ustr2, pos)
  return PositionSublist(IntListUnicodeString(ustr),
                                            IntListUnicodeString(ustr2), pos);
end);

# helper function for encoding a unicode character to UTF-8
UNICODE_RECODE.UTF8UnicodeChar := function(n)
  local res, a, b, c, d;
  res := "";
  if n < 0 then
    return fail;
  elif n < 128 then
    Add(res, CHAR_INT(n));
  elif n < 2048 then
    a := n mod 64;
    b := (n - a) / 64;
    Add(res, CHAR_INT(b + 192));
    Add(res, CHAR_INT(a + 128));
  elif n < 65536 then
    a := n mod 64;
    n := (n - a)/64;
    b := n mod 64;
    c := (n - b)/64;
    Add(res, CHAR_INT(c + 224));
    Add(res, CHAR_INT(b + 128));
    Add(res, CHAR_INT(a + 128));
  elif n < 2097152 then
    a := n mod 64;
    n := (n - a)/64;
    b := n mod 64;
    n := (n - b)/64;
    c := n mod 64;
    d := (n - c)/64;
    Add(res, CHAR_INT(d + 240));
    Add(res, CHAR_INT(c + 128));
    Add(res, CHAR_INT(b + 128));
    Add(res, CHAR_INT(a + 128));
  else
    return fail;
  fi;
  return res;
end;
# encode unicode string to GAP string in UTF-8 encoding
UNICODE_RECODE.Encoder.("UTF-8") := function(ustr)
  local res, f, n;
  res := "";
  f := UNICODE_RECODE.UTF8UnicodeChar;
  for n in IntListUnicodeString(ustr) do
    Append(res, f(n));
  od;
  return res;
end;
# non-ASCII characters to XML character entities
UNICODE_RECODE.Encoder.("XML") := function(ustr)
  local res, n;
  res := "";
  for n in IntListUnicodeString(ustr) do
    if n < 128 then
      Add(res, CHAR_INT(n));
    else
      Append(res, Concatenation("&#x", LowercaseString(HexStringInt(n)),";"));
    fi;
  od;
  return res;
end;
# non-ASCII characters to LaTeX code, if known from LaTeXUnicodeTable
UNICODE_RECODE.Encoder.("LaTeX") := function(ustr)
  local tt, res, pos, n;
  tt := LaTeXUnicodeTable;
  res := "";
  for n in IntListUnicodeString(ustr) do
    if n < 128 then
      Add(res, CHAR_INT(n));
    else
      pos := PositionFirstComponent(LaTeXUnicodeTable, n);
      if IsBound(tt[pos]) and tt[pos][1] = n then
        Append(res, tt[pos][2]);
      else
        Append(res, Concatenation("Unicode(", String(n), ")"));
      fi;
    fi;
  od;
  return res;
end;
UNICODE_RECODE.NormalizedEncodings.LaTeX := "LaTeX";
UNICODE_RECODE.NormalizedEncodings.latex := "LaTeX";
UNICODE_RECODE.NormalizedEncodings.BibTeX := "LaTeX";

# ISO-8859 cases, substitute '?' for unknown characters
UNICODE_RECODE.f := function()
  local nam, i;
  for i in Concatenation([1..11],[13..15]) do
    nam := Concatenation("ISO-8859-", String(i));
    UNICODE_RECODE.Encoder.(nam) := function(ustr)
      local t, s, res, pos, c;
      if not IsBound(UNICODE_RECODE.TABLES.reverse.(nam)) then
        t := [0..255];
        s := ShallowCopy(UNICODE_RECODE.TABLES.(nam));
        SortParallel(s, t);
        UNICODE_RECODE.TABLES.reverse.(nam) := [s, t];
      fi;
      t := UNICODE_RECODE.TABLES.reverse.(nam);
      res := [];
      for c in IntListUnicodeString(ustr) do
        if c < 160 then
          Add(res, c);
        else
          pos := PositionSorted(t[1], c);
          if pos = fail then
            Add(res, 63); # '?'
          else
            Add(res, t[2][pos]);
          fi;
        fi;
      od;
      return STRING_SINTLIST(res);
    end;
  od;
end;
UNICODE_RECODE.f();
Unbind(UNICODE_RECODE.f);
UNICODE_RECODE.Encoder.("ANSI_X3.4-1968") := function(ustr)
  local res;
  res := List(IntListUnicodeString(ustr), function(i) 
    if i < 128 then return i; else return 63; fi; end);
  return STRING_SINTLIST(res);
end;
  
InstallMethod(Encode, [IsUnicodeString, IsString], function(ustr, enc)
  if not IsBound(UNICODE_RECODE.NormalizedEncodings.(enc)) then
    Error("Sorry, only the following encodings are supported for Encode:\n",
                    RecFields(UNICODE_RECODE.Encoder), "\n");
  fi;
  enc := UNICODE_RECODE.NormalizedEncodings.(enc);
  return UNICODE_RECODE.Encoder.(enc)(ustr);
end);

# here the default is UTF-8 encoding
InstallMethod(Encode, [IsUnicodeString], function(ustr)
  return UNICODE_RECODE.Encoder.("UTF-8")(ustr);
end);

InstallGlobalFunction(NrCharsUTF8String, function(str)
  local n, nc, c;
  n := 0;
  for c in str do
    nc := INT_CHAR(c);
    if nc < 128 or nc > 191 then
      n := n+1;
    fi;
  od;
  return n;
end);

